// Package taskrouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package taskrouter

import (
	"time"
)

const (
	AccountSid_authTokenScopes = "accountSid_authToken.Scopes"
)

// Defines values for TaskrouterV1WorkspacePrioritizeQueueOrder.
const (
	TaskrouterV1WorkspacePrioritizeQueueOrderFIFO TaskrouterV1WorkspacePrioritizeQueueOrder = "FIFO"
	TaskrouterV1WorkspacePrioritizeQueueOrderLIFO TaskrouterV1WorkspacePrioritizeQueueOrder = "LIFO"
)

// Defines values for TaskrouterV1WorkspaceTaskAssignmentStatus.
const (
	TaskrouterV1WorkspaceTaskAssignmentStatusAssigned  TaskrouterV1WorkspaceTaskAssignmentStatus = "assigned"
	TaskrouterV1WorkspaceTaskAssignmentStatusCanceled  TaskrouterV1WorkspaceTaskAssignmentStatus = "canceled"
	TaskrouterV1WorkspaceTaskAssignmentStatusCompleted TaskrouterV1WorkspaceTaskAssignmentStatus = "completed"
	TaskrouterV1WorkspaceTaskAssignmentStatusPending   TaskrouterV1WorkspaceTaskAssignmentStatus = "pending"
	TaskrouterV1WorkspaceTaskAssignmentStatusReserved  TaskrouterV1WorkspaceTaskAssignmentStatus = "reserved"
	TaskrouterV1WorkspaceTaskAssignmentStatusWrapping  TaskrouterV1WorkspaceTaskAssignmentStatus = "wrapping"
)

// Defines values for TaskrouterV1WorkspaceTaskTaskReservationReservationStatus.
const (
	TaskrouterV1WorkspaceTaskTaskReservationReservationStatusAccepted  TaskrouterV1WorkspaceTaskTaskReservationReservationStatus = "accepted"
	TaskrouterV1WorkspaceTaskTaskReservationReservationStatusCanceled  TaskrouterV1WorkspaceTaskTaskReservationReservationStatus = "canceled"
	TaskrouterV1WorkspaceTaskTaskReservationReservationStatusCompleted TaskrouterV1WorkspaceTaskTaskReservationReservationStatus = "completed"
	TaskrouterV1WorkspaceTaskTaskReservationReservationStatusPending   TaskrouterV1WorkspaceTaskTaskReservationReservationStatus = "pending"
	TaskrouterV1WorkspaceTaskTaskReservationReservationStatusRejected  TaskrouterV1WorkspaceTaskTaskReservationReservationStatus = "rejected"
	TaskrouterV1WorkspaceTaskTaskReservationReservationStatusRescinded TaskrouterV1WorkspaceTaskTaskReservationReservationStatus = "rescinded"
	TaskrouterV1WorkspaceTaskTaskReservationReservationStatusTimeout   TaskrouterV1WorkspaceTaskTaskReservationReservationStatus = "timeout"
	TaskrouterV1WorkspaceTaskTaskReservationReservationStatusWrapping  TaskrouterV1WorkspaceTaskTaskReservationReservationStatus = "wrapping"
)

// Defines values for TaskrouterV1WorkspaceTaskQueueTaskOrder.
const (
	TaskrouterV1WorkspaceTaskQueueTaskOrderFIFO TaskrouterV1WorkspaceTaskQueueTaskOrder = "FIFO"
	TaskrouterV1WorkspaceTaskQueueTaskOrderLIFO TaskrouterV1WorkspaceTaskQueueTaskOrder = "LIFO"
)

// Defines values for TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus.
const (
	TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatusAccepted  TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus = "accepted"
	TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatusCanceled  TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus = "canceled"
	TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatusCompleted TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus = "completed"
	TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatusPending   TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus = "pending"
	TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatusRejected  TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus = "rejected"
	TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatusRescinded TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus = "rescinded"
	TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatusTimeout   TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus = "timeout"
	TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatusWrapping  TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus = "wrapping"
)

// TaskrouterV1Workspace defines model for taskrouter.v1.workspace.
type TaskrouterV1Workspace struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The name of the default activity
	DefaultActivityName *string `json:"default_activity_name"`

	// The SID of the Activity that will be used when new Workers are created in the Workspace
	DefaultActivitySid *string `json:"default_activity_sid"`

	// The URL we call when an event occurs
	EventCallbackUrl *string `json:"event_callback_url"`

	// The list of Workspace events for which to call event_callback_url
	EventsFilter *string `json:"events_filter"`

	// The string that you assigned to describe the Workspace resource
	FriendlyName *string `json:"friendly_name"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// Whether multi-tasking is enabled
	MultiTaskEnabled *bool `json:"multi_task_enabled"`

	// The type of TaskQueue to prioritize when Workers are receiving Tasks from both types of TaskQueues
	PrioritizeQueueOrder *TaskrouterV1WorkspacePrioritizeQueueOrder `json:"prioritize_queue_order"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The name of the timeout activity
	TimeoutActivityName *string `json:"timeout_activity_name"`

	// The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response
	TimeoutActivitySid *string `json:"timeout_activity_sid"`

	// The absolute URL of the Workspace resource
	Url *string `json:"url"`
}

// The type of TaskQueue to prioritize when Workers are receiving Tasks from both types of TaskQueues
type TaskrouterV1WorkspacePrioritizeQueueOrder string

// TaskrouterV1WorkspaceActivity defines model for taskrouter.v1.workspace.activity.
type TaskrouterV1WorkspaceActivity struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Whether the Worker should be eligible to receive a Task when it occupies the Activity
	Available *bool `json:"available"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The string that you assigned to describe the Activity resource
	FriendlyName *string                 `json:"friendly_name"`
	Links        *map[string]interface{} `json:"links"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the Activity resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the Activity
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceEvent defines model for taskrouter.v1.workspace.event.
type TaskrouterV1WorkspaceEvent struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID of the resource that triggered the event
	ActorSid *string `json:"actor_sid"`

	// The type of resource that triggered the event
	ActorType *string `json:"actor_type"`

	// The absolute URL of the resource that triggered the event
	ActorUrl *string `json:"actor_url"`

	// A description of the event
	Description *string `json:"description"`

	// Data about the event
	EventData *map[string]interface{} `json:"event_data"`

	// The time the event was sent
	EventDate *time.Time `json:"event_date"`

	// The time the event was sent in milliseconds
	EventDateMs *int `json:"event_date_ms"`

	// The identifier for the event
	EventType *string `json:"event_type"`

	// The SID of the object the event is most relevant to
	ResourceSid *string `json:"resource_sid"`

	// The type of object the event is most relevant to
	ResourceType *string `json:"resource_type"`

	// The URL of the resource the event is most relevant to
	ResourceUrl *string `json:"resource_url"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// Where the Event originated
	Source *string `json:"source"`

	// The IP from which the Event originated
	SourceIpAddress *string `json:"source_ip_address"`

	// The absolute URL of the Event resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the Event
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceTask defines model for taskrouter.v1.workspace.task.
type TaskrouterV1WorkspaceTask struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// An object that contains the addon data for all installed addons
	Addons *string `json:"addons"`

	// The number of seconds since the Task was created
	Age *int `json:"age"`

	// The current status of the Task's assignment
	AssignmentStatus *TaskrouterV1WorkspaceTaskAssignmentStatus `json:"assignment_status"`

	// The JSON string with custom attributes of the work
	Attributes *string `json:"attributes"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// Retrieve the list of all Tasks in the Workspace with the specified priority
	Priority *int `json:"priority"`

	// The reason the Task was canceled or completed
	Reason *string `json:"reason"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The SID of the TaskChannel
	TaskChannelSid *string `json:"task_channel_sid"`

	// The unique name of the TaskChannel
	TaskChannelUniqueName *string `json:"task_channel_unique_name"`

	// The ISO 8601 date and time in GMT when the Task entered the TaskQueue.
	TaskQueueEnteredDate *time.Time `json:"task_queue_entered_date"`

	// The friendly name of the TaskQueue
	TaskQueueFriendlyName *string `json:"task_queue_friendly_name"`

	// The SID of the TaskQueue
	TaskQueueSid *string `json:"task_queue_sid"`

	// The amount of time in seconds that the Task can live before being assigned
	Timeout *int `json:"timeout"`

	// The absolute URL of the Task resource
	Url *string `json:"url"`

	// The friendly name of the Workflow that is controlling the Task
	WorkflowFriendlyName *string `json:"workflow_friendly_name"`

	// The SID of the Workflow that is controlling the Task
	WorkflowSid *string `json:"workflow_sid"`

	// The SID of the Workspace that contains the Task
	WorkspaceSid *string `json:"workspace_sid"`
}

// The current status of the Task's assignment
type TaskrouterV1WorkspaceTaskAssignmentStatus string

// TaskrouterV1WorkspaceTaskTaskReservation defines model for taskrouter.v1.workspace.task.task_reservation.
type TaskrouterV1WorkspaceTaskTaskReservation struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The current status of the reservation
	ReservationStatus *TaskrouterV1WorkspaceTaskTaskReservationReservationStatus `json:"reservation_status"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The SID of the reserved Task resource
	TaskSid *string `json:"task_sid"`

	// The absolute URL of the TaskReservation reservation
	Url *string `json:"url"`

	// The friendly_name of the Worker that is reserved
	WorkerName *string `json:"worker_name"`

	// The SID of the reserved Worker resource
	WorkerSid *string `json:"worker_sid"`

	// The SID of the Workspace that this task is contained within.
	WorkspaceSid *string `json:"workspace_sid"`
}

// The current status of the reservation
type TaskrouterV1WorkspaceTaskTaskReservationReservationStatus string

// TaskrouterV1WorkspaceTaskChannel defines model for taskrouter.v1.workspace.task_channel.
type TaskrouterV1WorkspaceTaskChannel struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Whether the Task Channel will prioritize Workers that have been idle
	ChannelOptimizedRouting *bool `json:"channel_optimized_routing"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// An application-defined string that uniquely identifies the Task Channel
	UniqueName *string `json:"unique_name"`

	// The absolute URL of the Task Channel resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the Task Channel
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceTaskQueue defines model for taskrouter.v1.workspace.task_queue.
type TaskrouterV1WorkspaceTaskQueue struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The name of the Activity to assign Workers when a task is assigned for them
	AssignmentActivityName *string `json:"assignment_activity_name"`

	// The SID of the Activity to assign Workers when a task is assigned for them
	AssignmentActivitySid *string `json:"assignment_activity_sid"`

	// The RFC 2822 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The RFC 2822 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The maximum number of Workers to reserve
	MaxReservedWorkers *int `json:"max_reserved_workers"`

	// The name of the Activity to assign Workers once a task is reserved for them
	ReservationActivityName *string `json:"reservation_activity_name"`

	// The SID of the Activity to assign Workers once a task is reserved for them
	ReservationActivitySid *string `json:"reservation_activity_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// A string describing the Worker selection criteria for any Tasks that enter the TaskQueue
	TargetWorkers *string `json:"target_workers"`

	// How Tasks will be assigned to Workers
	TaskOrder *TaskrouterV1WorkspaceTaskQueueTaskOrder `json:"task_order"`

	// The absolute URL of the TaskQueue resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the TaskQueue
	WorkspaceSid *string `json:"workspace_sid"`
}

// How Tasks will be assigned to Workers
type TaskrouterV1WorkspaceTaskQueueTaskOrder string

// TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics defines model for taskrouter.v1.workspace.task_queue.task_queue_cumulative_statistics.
type TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The average time in seconds between Task creation and acceptance
	AvgTaskAcceptanceTime *int `json:"avg_task_acceptance_time"`

	// The end of the interval during which these statistics were calculated
	EndTime *time.Time `json:"end_time"`

	// The total number of Reservations accepted for Tasks in the TaskQueue
	ReservationsAccepted *int `json:"reservations_accepted"`

	// The total number of Reservations canceled for Tasks in the TaskQueue
	ReservationsCanceled *int `json:"reservations_canceled"`

	// The total number of Reservations created for Tasks in the TaskQueue
	ReservationsCreated *int `json:"reservations_created"`

	// The total number of Reservations rejected for Tasks in the TaskQueue
	ReservationsRejected *int `json:"reservations_rejected"`

	// The total number of Reservations rescinded
	ReservationsRescinded *int `json:"reservations_rescinded"`

	// The total number of Reservations that timed out for Tasks in the TaskQueue
	ReservationsTimedOut *int `json:"reservations_timed_out"`

	// A list of objects that describe the Tasks canceled and reservations accepted above and below the specified thresholds
	SplitByWaitTime *map[string]interface{} `json:"split_by_wait_time"`

	// The beginning of the interval during which these statistics were calculated
	StartTime *time.Time `json:"start_time"`

	// The SID of the TaskQueue from which these statistics were calculated
	TaskQueueSid *string `json:"task_queue_sid"`

	// The total number of Tasks canceled in the TaskQueue
	TasksCanceled *int `json:"tasks_canceled"`

	// The total number of Tasks completed in the TaskQueue
	TasksCompleted *int `json:"tasks_completed"`

	// The total number of Tasks deleted in the TaskQueue
	TasksDeleted *int `json:"tasks_deleted"`

	// The total number of Tasks entered into the TaskQueue
	TasksEntered *int `json:"tasks_entered"`

	// The total number of Tasks that were moved from one queue to another
	TasksMoved *int `json:"tasks_moved"`

	// The absolute URL of the TaskQueue statistics resource
	Url *string `json:"url"`

	// The relative wait duration statistics for Tasks accepted while in the TaskQueue
	WaitDurationInQueueUntilAccepted *map[string]interface{} `json:"wait_duration_in_queue_until_accepted"`

	// The wait duration statistics for Tasks accepted while in the TaskQueue
	WaitDurationUntilAccepted *map[string]interface{} `json:"wait_duration_until_accepted"`

	// The wait duration statistics for Tasks canceled while in the TaskQueue
	WaitDurationUntilCanceled *map[string]interface{} `json:"wait_duration_until_canceled"`

	// The SID of the Workspace that contains the TaskQueue
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics defines model for taskrouter.v1.workspace.task_queue.task_queue_real_time_statistics.
type TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The number of current Workers by Activity
	ActivityStatistics *[]map[string]interface{} `json:"activity_statistics"`

	// The relative age in the TaskQueue for the longest waiting Task.
	LongestRelativeTaskAgeInQueue *int `json:"longest_relative_task_age_in_queue"`

	// The SID of the Task waiting in the TaskQueue the longest.
	LongestRelativeTaskSidInQueue *string `json:"longest_relative_task_sid_in_queue"`

	// The age of the longest waiting Task
	LongestTaskWaitingAge *int `json:"longest_task_waiting_age"`

	// The SID of the longest waiting Task
	LongestTaskWaitingSid *string `json:"longest_task_waiting_sid"`

	// The SID of the TaskQueue from which these statistics were calculated
	TaskQueueSid *string `json:"task_queue_sid"`

	// The number of Tasks by priority
	TasksByPriority *map[string]interface{} `json:"tasks_by_priority"`

	// The number of Tasks by their current status
	TasksByStatus *map[string]interface{} `json:"tasks_by_status"`

	// The total number of Workers available for Tasks in the TaskQueue
	TotalAvailableWorkers *int `json:"total_available_workers"`

	// The total number of Workers eligible for Tasks in the TaskQueue, independent of their Activity state
	TotalEligibleWorkers *int `json:"total_eligible_workers"`

	// The total number of Tasks
	TotalTasks *int `json:"total_tasks"`

	// The absolute URL of the TaskQueue statistics resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the TaskQueue
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics defines model for taskrouter.v1.workspace.task_queue.task_queue_statistics.
type TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// An object that contains the cumulative statistics for the TaskQueue
	Cumulative *map[string]interface{} `json:"cumulative"`

	// An object that contains the real-time statistics for the TaskQueue
	Realtime *map[string]interface{} `json:"realtime"`

	// The SID of the TaskQueue from which these statistics were calculated
	TaskQueueSid *string `json:"task_queue_sid"`

	// The absolute URL of the TaskQueue statistics resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the TaskQueue
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceTaskQueueTaskQueuesStatistics defines model for taskrouter.v1.workspace.task_queue.task_queues_statistics.
type TaskrouterV1WorkspaceTaskQueueTaskQueuesStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// An object that contains the cumulative statistics for the TaskQueues
	Cumulative *map[string]interface{} `json:"cumulative"`

	// An object that contains the real-time statistics for the TaskQueues
	Realtime *map[string]interface{} `json:"realtime"`

	// The SID of the TaskQueue from which these statistics were calculated
	TaskQueueSid *string `json:"task_queue_sid"`

	// The SID of the Workspace that contains the TaskQueues
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorker defines model for taskrouter.v1.workspace.worker.
type TaskrouterV1WorkspaceWorker struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The friendly_name of the Worker's current Activity
	ActivityName *string `json:"activity_name"`

	// The SID of the Worker's current Activity
	ActivitySid *string `json:"activity_sid"`

	// The JSON string that describes the Worker
	Attributes *string `json:"attributes"`

	// Whether the Worker is available to perform tasks
	Available *bool `json:"available"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The date and time in GMT of the last change to the Worker's activity
	DateStatusChanged *time.Time `json:"date_status_changed"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the Worker resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the Worker
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkerWorkerChannel defines model for taskrouter.v1.workspace.worker.worker_channel.
type TaskrouterV1WorkspaceWorkerWorkerChannel struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The total number of Tasks assigned to Worker for the TaskChannel type
	AssignedTasks *int `json:"assigned_tasks"`

	// Whether the Worker should receive Tasks of the TaskChannel type
	Available *bool `json:"available"`

	// The current available capacity between 0 to 100 for the TaskChannel
	AvailableCapacityPercentage *int `json:"available_capacity_percentage"`

	// The current configured capacity for the WorkerChannel
	ConfiguredCapacity *int `json:"configured_capacity"`

	// The RFC 2822 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The RFC 2822 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The SID of the TaskChannel
	TaskChannelSid *string `json:"task_channel_sid"`

	// The unique name of the TaskChannel, such as 'voice' or 'sms'
	TaskChannelUniqueName *string `json:"task_channel_unique_name"`

	// The absolute URL of the WorkerChannel resource
	Url *string `json:"url"`

	// The SID of the Worker that contains the WorkerChannel
	WorkerSid *string `json:"worker_sid"`

	// The SID of the Workspace that contains the WorkerChannel
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics defines model for taskrouter.v1.workspace.worker.worker_instance_statistics.
type TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// An object that contains the cumulative statistics for the Worker
	Cumulative *map[string]interface{} `json:"cumulative"`

	// The absolute URL of the WorkerChannel statistics resource
	Url *string `json:"url"`

	// The SID of the Worker that contains the WorkerChannel
	WorkerSid *string `json:"worker_sid"`

	// The SID of the Workspace that contains the WorkerChannel
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkerWorkerReservation defines model for taskrouter.v1.workspace.worker.worker_reservation.
type TaskrouterV1WorkspaceWorkerWorkerReservation struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The current status of the reservation
	ReservationStatus *TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus `json:"reservation_status"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The SID of the reserved Task resource
	TaskSid *string `json:"task_sid"`

	// The absolute URL of the WorkerReservation resource
	Url *string `json:"url"`

	// The friendly_name of the Worker that is reserved
	WorkerName *string `json:"worker_name"`

	// The SID of the reserved Worker resource
	WorkerSid *string `json:"worker_sid"`

	// The SID of the Workspace that this worker is contained within.
	WorkspaceSid *string `json:"workspace_sid"`
}

// The current status of the reservation
type TaskrouterV1WorkspaceWorkerWorkerReservationReservationStatus string

// TaskrouterV1WorkspaceWorkerWorkerStatistics defines model for taskrouter.v1.workspace.worker.worker_statistics.
type TaskrouterV1WorkspaceWorkerWorkerStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// An object that contains the cumulative statistics for the Worker
	Cumulative *map[string]interface{} `json:"cumulative"`

	// An object that contains the real-time statistics for the Worker
	Realtime *map[string]interface{} `json:"realtime"`

	// The absolute URL of the Worker statistics resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the Worker
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics defines model for taskrouter.v1.workspace.worker.workers_cumulative_statistics.
type TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The minimum, average, maximum, and total time that Workers spent in each Activity
	ActivityDurations *[]map[string]interface{} `json:"activity_durations"`

	// The end of the interval during which these statistics were calculated
	EndTime *time.Time `json:"end_time"`

	// The total number of Reservations that were accepted
	ReservationsAccepted *int `json:"reservations_accepted"`

	// The total number of Reservations that were canceled
	ReservationsCanceled *int `json:"reservations_canceled"`

	// The total number of Reservations that were created
	ReservationsCreated *int `json:"reservations_created"`

	// The total number of Reservations that were rejected
	ReservationsRejected *int `json:"reservations_rejected"`

	// The total number of Reservations that were rescinded
	ReservationsRescinded *int `json:"reservations_rescinded"`

	// The total number of Reservations that were timed out
	ReservationsTimedOut *int `json:"reservations_timed_out"`

	// The beginning of the interval during which these statistics were calculated
	StartTime *time.Time `json:"start_time"`

	// The absolute URL of the Workers statistics resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the Workers
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics defines model for taskrouter.v1.workspace.worker.workers_real_time_statistics.
type TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The number of current Workers by Activity
	ActivityStatistics *[]map[string]interface{} `json:"activity_statistics"`

	// The total number of Workers
	TotalWorkers *int `json:"total_workers"`

	// The absolute URL of the Workers statistics resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the Workers
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkflow defines model for taskrouter.v1.workspace.workflow.
type TaskrouterV1WorkspaceWorkflow struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The URL that we call when a task managed by the Workflow is assigned to a Worker
	AssignmentCallbackUrl *string `json:"assignment_callback_url"`

	// A JSON string that contains the Workflow's configuration
	Configuration *string `json:"configuration"`

	// The RFC 2822 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The RFC 2822 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The MIME type of the document
	DocumentContentType *string `json:"document_content_type"`

	// The URL that we call when a call to the `assignment_callback_url` fails
	FallbackAssignmentCallbackUrl *string `json:"fallback_assignment_callback_url"`

	// The string that you assigned to describe the Workflow resource
	FriendlyName *string `json:"friendly_name"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker
	TaskReservationTimeout *int `json:"task_reservation_timeout"`

	// The absolute URL of the Workflow resource
	Url *string `json:"url"`

	// The SID of the Workspace that contains the Workflow
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics defines model for taskrouter.v1.workspace.workflow.workflow_cumulative_statistics.
type TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The average time in seconds between Task creation and acceptance
	AvgTaskAcceptanceTime *int `json:"avg_task_acceptance_time"`

	// The end of the interval during which these statistics were calculated
	EndTime *time.Time `json:"end_time"`

	// The total number of Reservations accepted by Workers
	ReservationsAccepted *int `json:"reservations_accepted"`

	// The total number of Reservations that were canceled
	ReservationsCanceled *int `json:"reservations_canceled"`

	// The total number of Reservations that were created for Workers
	ReservationsCreated *int `json:"reservations_created"`

	// The total number of Reservations that were rejected
	ReservationsRejected *int `json:"reservations_rejected"`

	// The total number of Reservations that were rescinded
	ReservationsRescinded *int `json:"reservations_rescinded"`

	// The total number of Reservations that were timed out
	ReservationsTimedOut *int `json:"reservations_timed_out"`

	// A list of objects that describe the Tasks canceled and reservations accepted above and below the specified thresholds
	SplitByWaitTime *map[string]interface{} `json:"split_by_wait_time"`

	// The beginning of the interval during which these statistics were calculated
	StartTime *time.Time `json:"start_time"`

	// The total number of Tasks that were canceled
	TasksCanceled *int `json:"tasks_canceled"`

	// The total number of Tasks that were completed
	TasksCompleted *int `json:"tasks_completed"`

	// The total number of Tasks that were deleted
	TasksDeleted *int `json:"tasks_deleted"`

	// The total number of Tasks that entered the Workflow
	TasksEntered *int `json:"tasks_entered"`

	// The total number of Tasks that were moved from one queue to another
	TasksMoved *int `json:"tasks_moved"`

	// The total number of Tasks that were timed out of their Workflows
	TasksTimedOutInWorkflow *int `json:"tasks_timed_out_in_workflow"`

	// The absolute URL of the Workflow statistics resource
	Url *string `json:"url"`

	// The wait duration statistics for Tasks that were accepted
	WaitDurationUntilAccepted *map[string]interface{} `json:"wait_duration_until_accepted"`

	// The wait duration statistics for Tasks that were canceled
	WaitDurationUntilCanceled *map[string]interface{} `json:"wait_duration_until_canceled"`

	// Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value
	WorkflowSid *string `json:"workflow_sid"`

	// The SID of the Workspace that contains the Workflow.
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics defines model for taskrouter.v1.workspace.workflow.workflow_real_time_statistics.
type TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The age of the longest waiting Task
	LongestTaskWaitingAge *int `json:"longest_task_waiting_age"`

	// The SID of the longest waiting Task
	LongestTaskWaitingSid *string `json:"longest_task_waiting_sid"`

	// The number of Tasks by priority
	TasksByPriority *map[string]interface{} `json:"tasks_by_priority"`

	// The number of Tasks by their current status
	TasksByStatus *map[string]interface{} `json:"tasks_by_status"`

	// The total number of Tasks
	TotalTasks *int `json:"total_tasks"`

	// The absolute URL of the Workflow statistics resource
	Url *string `json:"url"`

	// Returns the list of Tasks that are being controlled by the Workflow with the specified SID value
	WorkflowSid *string `json:"workflow_sid"`

	// The SID of the Workspace that contains the Workflow.
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkflowWorkflowStatistics defines model for taskrouter.v1.workspace.workflow.workflow_statistics.
type TaskrouterV1WorkspaceWorkflowWorkflowStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// An object that contains the cumulative statistics for the Workflow
	Cumulative *map[string]interface{} `json:"cumulative"`

	// An object that contains the real-time statistics for the Workflow
	Realtime *map[string]interface{} `json:"realtime"`

	// The absolute URL of the Workflow statistics resource
	Url *string `json:"url"`

	// Returns the list of Tasks that are being controlled by the Workflow with the specified SID value
	WorkflowSid *string `json:"workflow_sid"`

	// The SID of the Workspace that contains the Workflow
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkspaceCumulativeStatistics defines model for taskrouter.v1.workspace.workspace_cumulative_statistics.
type TaskrouterV1WorkspaceWorkspaceCumulativeStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The average time in seconds between Task creation and acceptance
	AvgTaskAcceptanceTime *int `json:"avg_task_acceptance_time"`

	// The end of the interval during which these statistics were calculated
	EndTime *time.Time `json:"end_time"`

	// The total number of Reservations accepted by Workers
	ReservationsAccepted *int `json:"reservations_accepted"`

	// The total number of Reservations that were canceled
	ReservationsCanceled *int `json:"reservations_canceled"`

	// The total number of Reservations that were created for Workers
	ReservationsCreated *int `json:"reservations_created"`

	// The total number of Reservations that were rejected
	ReservationsRejected *int `json:"reservations_rejected"`

	// The total number of Reservations that were rescinded
	ReservationsRescinded *int `json:"reservations_rescinded"`

	// The total number of Reservations that were timed out
	ReservationsTimedOut *int `json:"reservations_timed_out"`

	// A list of objects that describe the Tasks canceled and reservations accepted above and below the specified thresholds
	SplitByWaitTime *map[string]interface{} `json:"split_by_wait_time"`

	// The beginning of the interval during which these statistics were calculated
	StartTime *time.Time `json:"start_time"`

	// The total number of Tasks that were canceled
	TasksCanceled *int `json:"tasks_canceled"`

	// The total number of Tasks that were completed
	TasksCompleted *int `json:"tasks_completed"`

	// The total number of Tasks created
	TasksCreated *int `json:"tasks_created"`

	// The total number of Tasks that were deleted
	TasksDeleted *int `json:"tasks_deleted"`

	// The total number of Tasks that were moved from one queue to another
	TasksMoved *int `json:"tasks_moved"`

	// The total number of Tasks that were timed out of their Workflows
	TasksTimedOutInWorkflow *int `json:"tasks_timed_out_in_workflow"`

	// The absolute URL of the Workspace statistics resource
	Url *string `json:"url"`

	// The wait duration statistics for Tasks that were accepted
	WaitDurationUntilAccepted *map[string]interface{} `json:"wait_duration_until_accepted"`

	// The wait duration statistics for Tasks that were canceled
	WaitDurationUntilCanceled *map[string]interface{} `json:"wait_duration_until_canceled"`

	// The SID of the Workspace
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkspaceRealTimeStatistics defines model for taskrouter.v1.workspace.workspace_real_time_statistics.
type TaskrouterV1WorkspaceWorkspaceRealTimeStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The number of current Workers by Activity
	ActivityStatistics *[]map[string]interface{} `json:"activity_statistics"`

	// The age of the longest waiting Task
	LongestTaskWaitingAge *int `json:"longest_task_waiting_age"`

	// The SID of the longest waiting Task
	LongestTaskWaitingSid *string `json:"longest_task_waiting_sid"`

	// The number of Tasks by priority
	TasksByPriority *map[string]interface{} `json:"tasks_by_priority"`

	// The number of Tasks by their current status
	TasksByStatus *map[string]interface{} `json:"tasks_by_status"`

	// The total number of Tasks
	TotalTasks *int `json:"total_tasks"`

	// The total number of Workers in the Workspace
	TotalWorkers *int `json:"total_workers"`

	// The absolute URL of the Workspace statistics resource
	Url *string `json:"url"`

	// The SID of the Workspace
	WorkspaceSid *string `json:"workspace_sid"`
}

// TaskrouterV1WorkspaceWorkspaceStatistics defines model for taskrouter.v1.workspace.workspace_statistics.
type TaskrouterV1WorkspaceWorkspaceStatistics struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// An object that contains the cumulative statistics for the Workspace
	Cumulative *map[string]interface{} `json:"cumulative"`

	// n object that contains the real-time statistics for the Workspace
	Realtime *map[string]interface{} `json:"realtime"`

	// The absolute URL of the Workspace statistics resource
	Url *string `json:"url"`

	// The SID of the Workspace
	WorkspaceSid *string `json:"workspace_sid"`
}

// ListWorkspaceParams defines parameters for ListWorkspace.
type ListWorkspaceParams struct {
	// The `friendly_name` of the Workspace resources to read. For example `Customer Support` or `2014 Election Campaign`.
	FriendlyName *string `json:"FriendlyName,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListActivityParams defines parameters for ListActivity.
type ListActivityParams struct {
	// The `friendly_name` of the Activity resources to read.
	FriendlyName *string `json:"FriendlyName,omitempty"`

	// Whether return only Activity resources that are available or unavailable. A value of `true` returns only available activities. Values of '1' or `yes` also indicate `true`. All other values represent `false` and return activities that are unavailable.
	Available *string `json:"Available,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// FetchWorkspaceCumulativeStatisticsParams defines parameters for FetchWorkspaceCumulativeStatistics.
type FetchWorkspaceCumulativeStatisticsParams struct {
	// Only include usage that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
	Minutes *int `json:"Minutes,omitempty"`

	// Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`

	// A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA.
	SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

// ListEventParams defines parameters for ListEvent.
type ListEventParams struct {
	// Only include Events that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// The type of Events to read. Returns only Events of the type specified.
	EventType *string `json:"EventType,omitempty"`

	// The period of events to read in minutes. Returns only Events that occurred since this many minutes in the past. The default is `15` minutes. Task Attributes for Events occuring more 43,200 minutes ago will be redacted.
	Minutes *int `json:"Minutes,omitempty"`

	// The SID of the Reservation with the Events to read. Returns only Events that pertain to the specified Reservation.
	ReservationSid *string `json:"ReservationSid,omitempty"`

	// Only include Events from on or after this date and time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task Attributes for Events older than 30 days will be redacted.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// The SID of the TaskQueue with the Events to read. Returns only the Events that pertain to the specified TaskQueue.
	TaskQueueSid *string `json:"TaskQueueSid,omitempty"`

	// The SID of the Task with the Events to read. Returns only the Events that pertain to the specified Task.
	TaskSid *string `json:"TaskSid,omitempty"`

	// The SID of the Worker with the Events to read. Returns only the Events that pertain to the specified Worker.
	WorkerSid *string `json:"WorkerSid,omitempty"`

	// The SID of the Workflow with the Events to read. Returns only the Events that pertain to the specified Workflow.
	WorkflowSid *string `json:"WorkflowSid,omitempty"`

	// The TaskChannel with the Events to read. Returns only the Events that pertain to the specified TaskChannel.
	TaskChannel *string `json:"TaskChannel,omitempty"`

	// The SID of the Event resource to read.
	Sid *string `json:"Sid,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// FetchWorkspaceRealTimeStatisticsParams defines parameters for FetchWorkspaceRealTimeStatistics.
type FetchWorkspaceRealTimeStatisticsParams struct {
	// Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`
}

// FetchWorkspaceStatisticsParams defines parameters for FetchWorkspaceStatistics.
type FetchWorkspaceStatisticsParams struct {
	// Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
	Minutes *int `json:"Minutes,omitempty"`

	// Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`

	// A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA.
	SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

// ListTaskChannelParams defines parameters for ListTaskChannel.
type ListTaskChannelParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListTaskQueueParams defines parameters for ListTaskQueue.
type ListTaskQueueParams struct {
	// The `friendly_name` of the TaskQueue resources to read.
	FriendlyName *string `json:"FriendlyName,omitempty"`

	// The attributes of the Workers to read. Returns the TaskQueues with Workers that match the attributes specified in this parameter.
	EvaluateWorkerAttributes *string `json:"EvaluateWorkerAttributes,omitempty"`

	// The SID of the Worker with the TaskQueue resources to read.
	WorkerSid *string `json:"WorkerSid,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListTaskQueuesStatisticsParams defines parameters for ListTaskQueuesStatistics.
type ListTaskQueuesStatisticsParams struct {
	// Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// The `friendly_name` of the TaskQueue statistics to read.
	FriendlyName *string `json:"FriendlyName,omitempty"`

	// Only calculate statistics since this many minutes in the past. The default is 15 minutes.
	Minutes *int `json:"Minutes,omitempty"`

	// Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`

	// A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed.
	SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// FetchTaskQueueCumulativeStatisticsParams defines parameters for FetchTaskQueueCumulativeStatistics.
type FetchTaskQueueCumulativeStatisticsParams struct {
	// Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// Only calculate statistics since this many minutes in the past. The default is 15 minutes.
	Minutes *int `json:"Minutes,omitempty"`

	// Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`

	// A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed.
	SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

// FetchTaskQueueRealTimeStatisticsParams defines parameters for FetchTaskQueueRealTimeStatistics.
type FetchTaskQueueRealTimeStatisticsParams struct {
	// The TaskChannel for which to fetch statistics. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`
}

// FetchTaskQueueStatisticsParams defines parameters for FetchTaskQueueStatistics.
type FetchTaskQueueStatisticsParams struct {
	// Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// Only calculate statistics since this many minutes in the past. The default is 15 minutes.
	Minutes *int `json:"Minutes,omitempty"`

	// Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// Only calculate real-time and cumulative statistics for the specified TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`

	// A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed.
	SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

// ListTaskParams defines parameters for ListTask.
type ListTaskParams struct {
	// The priority value of the Tasks to read. Returns the list of all Tasks in the Workspace with the specified priority.
	Priority *int `json:"Priority,omitempty"`

	// The `assignment_status` of the Tasks you want to read. Can be: `pending`, `reserved`, `assigned`, `canceled`, `wrapping`, or `completed`. Returns all Tasks in the Workspace with the specified `assignment_status`.
	AssignmentStatus *[]string `json:"AssignmentStatus,omitempty"`

	// The SID of the Workflow with the Tasks to read. Returns the Tasks controlled by the Workflow identified by this SID.
	WorkflowSid *string `json:"WorkflowSid,omitempty"`

	// The friendly name of the Workflow with the Tasks to read. Returns the Tasks controlled by the Workflow identified by this friendly name.
	WorkflowName *string `json:"WorkflowName,omitempty"`

	// The SID of the TaskQueue with the Tasks to read. Returns the Tasks waiting in the TaskQueue identified by this SID.
	TaskQueueSid *string `json:"TaskQueueSid,omitempty"`

	// The `friendly_name` of the TaskQueue with the Tasks to read. Returns the Tasks waiting in the TaskQueue identified by this friendly name.
	TaskQueueName *string `json:"TaskQueueName,omitempty"`

	// The attributes of the Tasks to read. Returns the Tasks that match the attributes specified in this parameter.
	EvaluateTaskAttributes *string `json:"EvaluateTaskAttributes,omitempty"`

	// How to order the returned Task resources. y default, Tasks are sorted by ascending DateCreated. This value is specified as: `Attribute:Order`, where `Attribute` can be either `Priority` or `DateCreated` and `Order` can be either `asc` or `desc`. For example, `Priority:desc` returns Tasks ordered in descending order of their Priority. Multiple sort orders can be specified in a comma-separated list such as `Priority:desc,DateCreated:asc`, which returns the Tasks in descending Priority order and ascending DateCreated Order.
	Ordering *string `json:"Ordering,omitempty"`

	// Whether to read Tasks with addons. If `true`, returns only Tasks with addons. If `false`, returns only Tasks without addons.
	HasAddons *bool `json:"HasAddons,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// DeleteTaskParams defines parameters for DeleteTask.
type DeleteTaskParams struct {
	// If provided, deletes this Task if (and only if) the [ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) header of the Task matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match).
	IfMatch *string `json:"If-Match,omitempty"`
}

// UpdateTaskParams defines parameters for UpdateTask.
type UpdateTaskParams struct {
	// If provided, applies this mutation if (and only if) the [ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) header of the Task matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match).
	IfMatch *string `json:"If-Match,omitempty"`
}

// ListTaskReservationParams defines parameters for ListTaskReservation.
type ListTaskReservationParams struct {
	// Returns the list of reservations for a task with a specified ReservationStatus.  Can be: `pending`, `accepted`, `rejected`, or `timeout`.
	ReservationStatus *ListTaskReservationParamsReservationStatus `json:"ReservationStatus,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListTaskReservationParamsReservationStatus defines parameters for ListTaskReservation.
type ListTaskReservationParamsReservationStatus string

// UpdateTaskReservationParams defines parameters for UpdateTaskReservation.
type UpdateTaskReservationParams struct {
	// The If-Match HTTP request header
	IfMatch *string `json:"If-Match,omitempty"`
}

// ListWorkerParams defines parameters for ListWorker.
type ListWorkerParams struct {
	// The `activity_name` of the Worker resources to read.
	ActivityName *string `json:"ActivityName,omitempty"`

	// The `activity_sid` of the Worker resources to read.
	ActivitySid *string `json:"ActivitySid,omitempty"`

	// Whether to return only Worker resources that are available or unavailable. Can be `true`, `1`, or `yes` to return Worker resources that are available, and `false`, or any value returns the Worker resources that are not available.
	Available *string `json:"Available,omitempty"`

	// The `friendly_name` of the Worker resources to read.
	FriendlyName *string `json:"FriendlyName,omitempty"`

	// Filter by Workers that would match an expression on a TaskQueue. This is helpful for debugging which Workers would match a potential queue.
	TargetWorkersExpression *string `json:"TargetWorkersExpression,omitempty"`

	// The `friendly_name` of the TaskQueue that the Workers to read are eligible for.
	TaskQueueName *string `json:"TaskQueueName,omitempty"`

	// The SID of the TaskQueue that the Workers to read are eligible for.
	TaskQueueSid *string `json:"TaskQueueSid,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// FetchWorkersCumulativeStatisticsParams defines parameters for FetchWorkersCumulativeStatistics.
type FetchWorkersCumulativeStatisticsParams struct {
	// Only calculate statistics from this date and time and earlier, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
	Minutes *int `json:"Minutes,omitempty"`

	// Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`
}

// FetchWorkersRealTimeStatisticsParams defines parameters for FetchWorkersRealTimeStatistics.
type FetchWorkersRealTimeStatisticsParams struct {
	// Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`
}

// FetchWorkerStatisticsParams defines parameters for FetchWorkerStatistics.
type FetchWorkerStatisticsParams struct {
	// Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
	Minutes *int `json:"Minutes,omitempty"`

	// Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// The SID of the TaskQueue for which to fetch Worker statistics.
	TaskQueueSid *string `json:"TaskQueueSid,omitempty"`

	// The `friendly_name` of the TaskQueue for which to fetch Worker statistics.
	TaskQueueName *string `json:"TaskQueueName,omitempty"`

	// Only include Workers with `friendly_name` values that match this parameter.
	FriendlyName *string `json:"FriendlyName,omitempty"`

	// Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`
}

// DeleteWorkerParams defines parameters for DeleteWorker.
type DeleteWorkerParams struct {
	// The If-Match HTTP request header
	IfMatch *string `json:"If-Match,omitempty"`
}

// UpdateWorkerParams defines parameters for UpdateWorker.
type UpdateWorkerParams struct {
	// The If-Match HTTP request header
	IfMatch *string `json:"If-Match,omitempty"`
}

// ListWorkerChannelParams defines parameters for ListWorkerChannel.
type ListWorkerChannelParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListWorkerReservationParams defines parameters for ListWorkerReservation.
type ListWorkerReservationParams struct {
	// Returns the list of reservations for a worker with a specified ReservationStatus. Can be: `pending`, `accepted`, `rejected`, `timeout`, `canceled`, or `rescinded`.
	ReservationStatus *ListWorkerReservationParamsReservationStatus `json:"ReservationStatus,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListWorkerReservationParamsReservationStatus defines parameters for ListWorkerReservation.
type ListWorkerReservationParamsReservationStatus string

// UpdateWorkerReservationParams defines parameters for UpdateWorkerReservation.
type UpdateWorkerReservationParams struct {
	// The If-Match HTTP request header
	IfMatch *string `json:"If-Match,omitempty"`
}

// FetchWorkerInstanceStatisticsParams defines parameters for FetchWorkerInstanceStatistics.
type FetchWorkerInstanceStatisticsParams struct {
	// Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
	Minutes *int `json:"Minutes,omitempty"`

	// Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// Only include usage that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`
}

// ListWorkflowParams defines parameters for ListWorkflow.
type ListWorkflowParams struct {
	// The `friendly_name` of the Workflow resources to read.
	FriendlyName *string `json:"FriendlyName,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// FetchWorkflowCumulativeStatisticsParams defines parameters for FetchWorkflowCumulativeStatistics.
type FetchWorkflowCumulativeStatisticsParams struct {
	// Only include usage that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
	Minutes *int `json:"Minutes,omitempty"`

	// Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`

	// A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA.
	SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

// FetchWorkflowRealTimeStatisticsParams defines parameters for FetchWorkflowRealTimeStatistics.
type FetchWorkflowRealTimeStatisticsParams struct {
	// Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`
}

// FetchWorkflowStatisticsParams defines parameters for FetchWorkflowStatistics.
type FetchWorkflowStatisticsParams struct {
	// Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
	Minutes *int `json:"Minutes,omitempty"`

	// Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	StartDate *time.Time `json:"StartDate,omitempty"`

	// Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
	EndDate *time.Time `json:"EndDate,omitempty"`

	// Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
	TaskChannel *string `json:"TaskChannel,omitempty"`

	// A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA.
	SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}
