// Package media provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package media

import (
	"time"
)

const (
	AccountSid_authTokenScopes = "accountSid_authToken.Scopes"
)

// Defines values for MediaV1MediaProcessorStatus.
const (
	MediaV1MediaProcessorStatusEnded   MediaV1MediaProcessorStatus = "ended"
	MediaV1MediaProcessorStatusFailed  MediaV1MediaProcessorStatus = "failed"
	MediaV1MediaProcessorStatusStarted MediaV1MediaProcessorStatus = "started"
)

// Defines values for MediaV1MediaProcessorStatusCallbackMethod.
const (
	MediaV1MediaProcessorStatusCallbackMethodDELETE MediaV1MediaProcessorStatusCallbackMethod = "DELETE"
	MediaV1MediaProcessorStatusCallbackMethodGET    MediaV1MediaProcessorStatusCallbackMethod = "GET"
	MediaV1MediaProcessorStatusCallbackMethodHEAD   MediaV1MediaProcessorStatusCallbackMethod = "HEAD"
	MediaV1MediaProcessorStatusCallbackMethodPATCH  MediaV1MediaProcessorStatusCallbackMethod = "PATCH"
	MediaV1MediaProcessorStatusCallbackMethodPOST   MediaV1MediaProcessorStatusCallbackMethod = "POST"
	MediaV1MediaProcessorStatusCallbackMethodPUT    MediaV1MediaProcessorStatusCallbackMethod = "PUT"
)

// Defines values for MediaV1MediaRecordingFormat.
const (
	MediaV1MediaRecordingFormatMp4  MediaV1MediaRecordingFormat = "mp4"
	MediaV1MediaRecordingFormatWebm MediaV1MediaRecordingFormat = "webm"
)

// Defines values for MediaV1MediaRecordingStatus.
const (
	MediaV1MediaRecordingStatusCompleted  MediaV1MediaRecordingStatus = "completed"
	MediaV1MediaRecordingStatusDeleted    MediaV1MediaRecordingStatus = "deleted"
	MediaV1MediaRecordingStatusFailed     MediaV1MediaRecordingStatus = "failed"
	MediaV1MediaRecordingStatusProcessing MediaV1MediaRecordingStatus = "processing"
)

// Defines values for MediaV1MediaRecordingStatusCallbackMethod.
const (
	MediaV1MediaRecordingStatusCallbackMethodDELETE MediaV1MediaRecordingStatusCallbackMethod = "DELETE"
	MediaV1MediaRecordingStatusCallbackMethodGET    MediaV1MediaRecordingStatusCallbackMethod = "GET"
	MediaV1MediaRecordingStatusCallbackMethodHEAD   MediaV1MediaRecordingStatusCallbackMethod = "HEAD"
	MediaV1MediaRecordingStatusCallbackMethodPATCH  MediaV1MediaRecordingStatusCallbackMethod = "PATCH"
	MediaV1MediaRecordingStatusCallbackMethodPOST   MediaV1MediaRecordingStatusCallbackMethod = "POST"
	MediaV1MediaRecordingStatusCallbackMethodPUT    MediaV1MediaRecordingStatusCallbackMethod = "PUT"
)

// Defines values for MediaV1PlayerStreamerEndedReason.
const (
	MediaV1PlayerStreamerEndedReasonEndedViaApi                MediaV1PlayerStreamerEndedReason = "ended-via-api"
	MediaV1PlayerStreamerEndedReasonMaxDurationExceeded        MediaV1PlayerStreamerEndedReason = "max-duration-exceeded"
	MediaV1PlayerStreamerEndedReasonStreamDisconnectedBySource MediaV1PlayerStreamerEndedReason = "stream-disconnected-by-source"
	MediaV1PlayerStreamerEndedReasonUnexpectedFailure          MediaV1PlayerStreamerEndedReason = "unexpected-failure"
)

// Defines values for MediaV1PlayerStreamerStatus.
const (
	MediaV1PlayerStreamerStatusCreated MediaV1PlayerStreamerStatus = "created"
	MediaV1PlayerStreamerStatusEnded   MediaV1PlayerStreamerStatus = "ended"
	MediaV1PlayerStreamerStatusFailed  MediaV1PlayerStreamerStatus = "failed"
	MediaV1PlayerStreamerStatusStarted MediaV1PlayerStreamerStatus = "started"
)

// Defines values for MediaV1PlayerStreamerStatusCallbackMethod.
const (
	MediaV1PlayerStreamerStatusCallbackMethodDELETE MediaV1PlayerStreamerStatusCallbackMethod = "DELETE"
	MediaV1PlayerStreamerStatusCallbackMethodGET    MediaV1PlayerStreamerStatusCallbackMethod = "GET"
	MediaV1PlayerStreamerStatusCallbackMethodHEAD   MediaV1PlayerStreamerStatusCallbackMethod = "HEAD"
	MediaV1PlayerStreamerStatusCallbackMethodPATCH  MediaV1PlayerStreamerStatusCallbackMethod = "PATCH"
	MediaV1PlayerStreamerStatusCallbackMethodPOST   MediaV1PlayerStreamerStatusCallbackMethod = "POST"
	MediaV1PlayerStreamerStatusCallbackMethodPUT    MediaV1PlayerStreamerStatusCallbackMethod = "PUT"
)

// MediaV1MediaProcessor defines model for media.v1.media_processor.
type MediaV1MediaProcessor struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The reason why a MediaProcessor ended
	EndedReason *string `json:"ended_reason"`

	// The Media Extension name or URL
	Extension *string `json:"extension"`

	// The Media Extension context
	ExtensionContext *string `json:"extension_context"`

	// Maximum MediaProcessor duration in minutes
	MaxDuration *int `json:"max_duration"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the MediaProcessor
	Status *MediaV1MediaProcessorStatus `json:"status"`

	// The URL to which Twilio will send MediaProcessor event updates
	StatusCallback *string `json:"status_callback"`

	// The HTTP method Twilio should use to call the `status_callback` URL
	StatusCallbackMethod *MediaV1MediaProcessorStatusCallbackMethod `json:"status_callback_method"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// The status of the MediaProcessor
type MediaV1MediaProcessorStatus string

// The HTTP method Twilio should use to call the `status_callback` URL
type MediaV1MediaProcessorStatusCallbackMethod string

// MediaV1MediaRecording defines model for media.v1.media_recording.
type MediaV1MediaRecording struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The bitrate of the media
	Bitrate *int `json:"bitrate"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The duration of the MediaRecording
	Duration *int `json:"duration"`

	// The format of the MediaRecording
	Format *MediaV1MediaRecordingFormat `json:"format"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The SID of the MediaProcessor
	ProcessorSid *string `json:"processor_sid"`

	// The dimensions of the video image in pixels
	Resolution *string `json:"resolution"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The size of the recording
	Size *int `json:"size"`

	// The SID of the resource that generated the original media
	SourceSid *string `json:"source_sid"`

	// The status of the MediaRecording
	Status *MediaV1MediaRecordingStatus `json:"status"`

	// The URL to which Twilio will send MediaRecording event updates
	StatusCallback *string `json:"status_callback"`

	// The HTTP method Twilio should use to call the `status_callback` URL
	StatusCallbackMethod *MediaV1MediaRecordingStatusCallbackMethod `json:"status_callback_method"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// The format of the MediaRecording
type MediaV1MediaRecordingFormat string

// The status of the MediaRecording
type MediaV1MediaRecordingStatus string

// The HTTP method Twilio should use to call the `status_callback` URL
type MediaV1MediaRecordingStatusCallbackMethod string

// MediaV1PlayerStreamer defines model for media.v1.player_streamer.
type MediaV1PlayerStreamer struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The reason why a PlayerStreamer ended
	EndedReason *MediaV1PlayerStreamerEndedReason `json:"ended_reason"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the PlayerStreamer
	Status *MediaV1PlayerStreamerStatus `json:"status"`

	// The URL to which Twilio will send PlayerStreamer event updates
	StatusCallback *string `json:"status_callback"`

	// The HTTP method Twilio should use to call the `status_callback` URL
	StatusCallbackMethod *MediaV1PlayerStreamerStatusCallbackMethod `json:"status_callback_method"`

	// The absolute URL of the resource
	Url *string `json:"url"`

	// Whether the PlayerStreamer is configured to stream video
	Video *bool `json:"video"`
}

// The reason why a PlayerStreamer ended
type MediaV1PlayerStreamerEndedReason string

// The status of the PlayerStreamer
type MediaV1PlayerStreamerStatus string

// The HTTP method Twilio should use to call the `status_callback` URL
type MediaV1PlayerStreamerStatusCallbackMethod string

// MediaV1PlayerStreamerPlayerStreamerPlaybackGrant defines model for media.v1.player_streamer.player_streamer_playback_grant.
type MediaV1PlayerStreamerPlayerStreamerPlaybackGrant struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The grant that authorizes the player sdk to connect to the livestream
	Grant *map[string]interface{} `json:"grant"`

	// The unique string that identifies the PlayerStreamer associated with this PlaybackGrant.
	Sid *string `json:"sid"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// ListMediaProcessorParams defines parameters for ListMediaProcessor.
type ListMediaProcessorParams struct {
	// The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
	Order *ListMediaProcessorParamsOrder `json:"Order,omitempty"`

	// Status to filter by, with possible values `started`, `ended` or `failed`.
	Status *ListMediaProcessorParamsStatus `json:"Status,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListMediaProcessorParamsOrder defines parameters for ListMediaProcessor.
type ListMediaProcessorParamsOrder string

// ListMediaProcessorParamsStatus defines parameters for ListMediaProcessor.
type ListMediaProcessorParamsStatus string

// ListMediaRecordingParams defines parameters for ListMediaRecording.
type ListMediaRecordingParams struct {
	// The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
	Order *ListMediaRecordingParamsOrder `json:"Order,omitempty"`

	// Status to filter by, with possible values `processing`, `completed`, `deleted`, or `failed`.
	Status *ListMediaRecordingParamsStatus `json:"Status,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListMediaRecordingParamsOrder defines parameters for ListMediaRecording.
type ListMediaRecordingParamsOrder string

// ListMediaRecordingParamsStatus defines parameters for ListMediaRecording.
type ListMediaRecordingParamsStatus string

// ListPlayerStreamerParams defines parameters for ListPlayerStreamer.
type ListPlayerStreamerParams struct {
	// The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
	Order *ListPlayerStreamerParamsOrder `json:"Order,omitempty"`

	// Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.
	Status *ListPlayerStreamerParamsStatus `json:"Status,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListPlayerStreamerParamsOrder defines parameters for ListPlayerStreamer.
type ListPlayerStreamerParamsOrder string

// ListPlayerStreamerParamsStatus defines parameters for ListPlayerStreamer.
type ListPlayerStreamerParamsStatus string
