// Package studio provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package studio

import (
	"time"
)

const (
	AccountSid_authTokenScopes = "accountSid_authToken.Scopes"
)

// Defines values for StudioV2FlowStatus.
const (
	StudioV2FlowStatusDraft     StudioV2FlowStatus = "draft"
	StudioV2FlowStatusPublished StudioV2FlowStatus = "published"
)

// Defines values for StudioV2FlowExecutionStatus.
const (
	StudioV2FlowExecutionStatusActive StudioV2FlowExecutionStatus = "active"
	StudioV2FlowExecutionStatusEnded  StudioV2FlowExecutionStatus = "ended"
)

// Defines values for StudioV2FlowFlowRevisionStatus.
const (
	StudioV2FlowFlowRevisionStatusDraft     StudioV2FlowFlowRevisionStatus = "draft"
	StudioV2FlowFlowRevisionStatusPublished StudioV2FlowFlowRevisionStatus = "published"
)

// StudioV2Flow defines model for studio.v2.flow.
type StudioV2Flow struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Description of change made in the revision
	CommitMessage *string `json:"commit_message"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// JSON representation of flow definition
	Definition *map[string]interface{} `json:"definition"`

	// List of error in the flow definition
	Errors *[]map[string]interface{} `json:"errors"`

	// The string that you assigned to describe the Flow
	FriendlyName *string `json:"friendly_name"`

	// Nested resource URLs
	Links *map[string]interface{} `json:"links"`

	// The latest revision number of the Flow's definition
	Revision *int `json:"revision"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the Flow
	Status *StudioV2FlowStatus `json:"status"`

	// The absolute URL of the resource
	Url *string `json:"url"`

	// Boolean if the flow definition is valid
	Valid *bool `json:"valid"`

	// List of warnings in the flow definition
	Warnings   *[]map[string]interface{} `json:"warnings"`
	WebhookUrl *string                   `json:"webhook_url"`
}

// The status of the Flow
type StudioV2FlowStatus string

// StudioV2FlowExecution defines model for studio.v2.flow.execution.
type StudioV2FlowExecution struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The phone number, SIP address or Client identifier that triggered the Execution
	ContactChannelAddress *string `json:"contact_channel_address"`

	// The current state of the flow
	Context *map[string]interface{} `json:"context"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The SID of the Flow
	FlowSid *string `json:"flow_sid"`

	// Nested resource URLs
	Links *map[string]interface{} `json:"links"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the Execution
	Status *StudioV2FlowExecutionStatus `json:"status"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// The status of the Execution
type StudioV2FlowExecutionStatus string

// StudioV2FlowExecutionExecutionContext defines model for studio.v2.flow.execution.execution_context.
type StudioV2FlowExecutionExecutionContext struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The current state of the flow
	Context *map[string]interface{} `json:"context"`

	// The SID of the Execution
	ExecutionSid *string `json:"execution_sid"`

	// The SID of the Flow
	FlowSid *string `json:"flow_sid"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// StudioV2FlowExecutionExecutionStep defines model for studio.v2.flow.execution.execution_step.
type StudioV2FlowExecutionExecutionStep struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The current state of the flow
	Context *map[string]interface{} `json:"context"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The SID of the Execution
	ExecutionSid *string `json:"execution_sid"`

	// The SID of the Flow
	FlowSid *string `json:"flow_sid"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The event that caused the Flow to transition to the Step
	Name *string `json:"name"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The Widget that preceded the Widget for the Step
	TransitionedFrom *string `json:"transitioned_from"`

	// The Widget that will follow the Widget for the Step
	TransitionedTo *string `json:"transitioned_to"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// StudioV2FlowExecutionExecutionStepExecutionStepContext defines model for studio.v2.flow.execution.execution_step.execution_step_context.
type StudioV2FlowExecutionExecutionStepExecutionStepContext struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The current state of the flow
	Context *map[string]interface{} `json:"context"`

	// The SID of the Execution
	ExecutionSid *string `json:"execution_sid"`

	// The SID of the Flow
	FlowSid *string `json:"flow_sid"`

	// Step SID
	StepSid *string `json:"step_sid"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// StudioV2FlowFlowRevision defines model for studio.v2.flow.flow_revision.
type StudioV2FlowFlowRevision struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Description of change made in the revision
	CommitMessage *string `json:"commit_message"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// JSON representation of flow definition
	Definition *map[string]interface{} `json:"definition"`

	// List of error in the flow definition
	Errors *[]map[string]interface{} `json:"errors"`

	// The string that you assigned to describe the Flow
	FriendlyName *string `json:"friendly_name"`

	// The latest revision number of the Flow's definition
	Revision *int `json:"revision"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the Flow
	Status *StudioV2FlowFlowRevisionStatus `json:"status"`

	// The absolute URL of the resource
	Url *string `json:"url"`

	// Boolean if the flow definition is valid
	Valid *bool `json:"valid"`
}

// The status of the Flow
type StudioV2FlowFlowRevisionStatus string

// StudioV2FlowTestUser defines model for studio.v2.flow.test_user.
type StudioV2FlowTestUser struct {
	// Unique identifier of the flow.
	Sid *string `json:"sid"`

	// List of test user identities that can test draft versions of the flow.
	TestUsers *[]string `json:"test_users"`

	// The URL of this resource.
	Url *string `json:"url"`
}

// StudioV2FlowValidate defines model for studio.v2.flow_validate.
type StudioV2FlowValidate struct {
	// Boolean if the flow definition is valid
	Valid *bool `json:"valid"`
}

// ListFlowParams defines parameters for ListFlow.
type ListFlowParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListExecutionParams defines parameters for ListExecution.
type ListExecutionParams struct {
	// Only show Execution resources starting on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time, given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
	DateCreatedFrom *time.Time `json:"DateCreatedFrom,omitempty"`

	// Only show Execution resources starting before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time, given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
	DateCreatedTo *time.Time `json:"DateCreatedTo,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListExecutionStepParams defines parameters for ListExecutionStep.
type ListExecutionStepParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListFlowRevisionParams defines parameters for ListFlowRevision.
type ListFlowRevisionParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}
