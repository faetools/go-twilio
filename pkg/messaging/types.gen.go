// Package messaging provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package messaging

import (
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	AccountSid_authTokenScopes = "accountSid_authToken.Scopes"
)

// Defines values for MessagingV1BrandRegistrationsBrandFeedback.
const (
	MessagingV1BrandRegistrationsBrandFeedbackGOVERNMENTENTITY MessagingV1BrandRegistrationsBrandFeedback = "GOVERNMENT_ENTITY"
	MessagingV1BrandRegistrationsBrandFeedbackNONPROFIT        MessagingV1BrandRegistrationsBrandFeedback = "NONPROFIT"
	MessagingV1BrandRegistrationsBrandFeedbackOTHERS           MessagingV1BrandRegistrationsBrandFeedback = "OTHERS"
	MessagingV1BrandRegistrationsBrandFeedbackSTOCKSYMBOL      MessagingV1BrandRegistrationsBrandFeedback = "STOCK_SYMBOL"
	MessagingV1BrandRegistrationsBrandFeedbackTAXID            MessagingV1BrandRegistrationsBrandFeedback = "TAX_ID"
)

// Defines values for MessagingV1BrandRegistrationsIdentityStatus.
const (
	MessagingV1BrandRegistrationsIdentityStatusSELFDECLARED   MessagingV1BrandRegistrationsIdentityStatus = "SELF_DECLARED"
	MessagingV1BrandRegistrationsIdentityStatusUNVERIFIED     MessagingV1BrandRegistrationsIdentityStatus = "UNVERIFIED"
	MessagingV1BrandRegistrationsIdentityStatusVERIFIED       MessagingV1BrandRegistrationsIdentityStatus = "VERIFIED"
	MessagingV1BrandRegistrationsIdentityStatusVETTEDVERIFIED MessagingV1BrandRegistrationsIdentityStatus = "VETTED_VERIFIED"
)

// Defines values for MessagingV1BrandRegistrationsStatus.
const (
	MessagingV1BrandRegistrationsStatusAPPROVED MessagingV1BrandRegistrationsStatus = "APPROVED"
	MessagingV1BrandRegistrationsStatusDELETED  MessagingV1BrandRegistrationsStatus = "DELETED"
	MessagingV1BrandRegistrationsStatusFAILED   MessagingV1BrandRegistrationsStatus = "FAILED"
	MessagingV1BrandRegistrationsStatusINREVIEW MessagingV1BrandRegistrationsStatus = "IN_REVIEW"
	MessagingV1BrandRegistrationsStatusPENDING  MessagingV1BrandRegistrationsStatus = "PENDING"
)

// Defines values for MessagingV1BrandRegistrationsBrandVettingVettingProvider.
const (
	MessagingV1BrandRegistrationsBrandVettingVettingProviderCampaignVerify MessagingV1BrandRegistrationsBrandVettingVettingProvider = "campaign-verify"
)

// Defines values for MessagingV1ServiceFallbackMethod.
const (
	MessagingV1ServiceFallbackMethodDELETE MessagingV1ServiceFallbackMethod = "DELETE"
	MessagingV1ServiceFallbackMethodGET    MessagingV1ServiceFallbackMethod = "GET"
	MessagingV1ServiceFallbackMethodHEAD   MessagingV1ServiceFallbackMethod = "HEAD"
	MessagingV1ServiceFallbackMethodPATCH  MessagingV1ServiceFallbackMethod = "PATCH"
	MessagingV1ServiceFallbackMethodPOST   MessagingV1ServiceFallbackMethod = "POST"
	MessagingV1ServiceFallbackMethodPUT    MessagingV1ServiceFallbackMethod = "PUT"
)

// Defines values for MessagingV1ServiceInboundMethod.
const (
	MessagingV1ServiceInboundMethodDELETE MessagingV1ServiceInboundMethod = "DELETE"
	MessagingV1ServiceInboundMethodGET    MessagingV1ServiceInboundMethod = "GET"
	MessagingV1ServiceInboundMethodHEAD   MessagingV1ServiceInboundMethod = "HEAD"
	MessagingV1ServiceInboundMethodPATCH  MessagingV1ServiceInboundMethod = "PATCH"
	MessagingV1ServiceInboundMethodPOST   MessagingV1ServiceInboundMethod = "POST"
	MessagingV1ServiceInboundMethodPUT    MessagingV1ServiceInboundMethod = "PUT"
)

// Defines values for MessagingV1ServiceScanMessageContent.
const (
	MessagingV1ServiceScanMessageContentDisable MessagingV1ServiceScanMessageContent = "disable"
	MessagingV1ServiceScanMessageContentEnable  MessagingV1ServiceScanMessageContent = "enable"
	MessagingV1ServiceScanMessageContentInherit MessagingV1ServiceScanMessageContent = "inherit"
)

// MessagingV1BrandRegistrations defines model for messaging.v1.brand_registrations.
type MessagingV1BrandRegistrations struct {
	// A2P Messaging Profile Bundle BundleSid
	A2pProfileBundleSid *string `json:"a2p_profile_bundle_sid"`

	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Brand feedback
	BrandFeedback *[]MessagingV1BrandRegistrationsBrandFeedback `json:"brand_feedback"`

	// Brand score
	BrandScore *int `json:"brand_score"`

	// Type of brand. One of: "STANDARD", "STARTER".
	BrandType *string `json:"brand_type"`

	// A2P Messaging Profile Bundle BundleSid
	CustomerProfileBundleSid *string `json:"customer_profile_bundle_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// A reason why brand registration has failed
	FailureReason *string `json:"failure_reason"`

	// Government Entity
	GovernmentEntity *bool `json:"government_entity"`

	// Identity Status
	IdentityStatus *MessagingV1BrandRegistrationsIdentityStatus `json:"identity_status"`
	Links          *map[string]interface{}                      `json:"links"`

	// A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.
	Mock *bool `json:"mock"`

	// Russell 3000
	Russell3000 *bool `json:"russell_3000"`

	// A2P BrandRegistration Sid
	Sid *string `json:"sid"`

	// Skip Automatic Secondary Vetting
	SkipAutomaticSecVet *bool `json:"skip_automatic_sec_vet"`

	// Brand Registration status.
	Status *MessagingV1BrandRegistrationsStatus `json:"status"`

	// Tax Exempt Status
	TaxExemptStatus *string `json:"tax_exempt_status"`

	// Campaign Registry (TCR) Brand ID
	TcrId *string `json:"tcr_id"`

	// The absolute URL of the Brand Registration
	Url *string `json:"url"`
}

// MessagingV1BrandRegistrationsBrandFeedback defines model for MessagingV1BrandRegistrations.BrandFeedback.
type MessagingV1BrandRegistrationsBrandFeedback string

// Identity Status
type MessagingV1BrandRegistrationsIdentityStatus string

// Brand Registration status.
type MessagingV1BrandRegistrationsStatus string

// MessagingV1BrandRegistrationsBrandVetting defines model for messaging.v1.brand_registrations.brand_vetting.
type MessagingV1BrandRegistrationsBrandVetting struct {
	// The SID of the Account that created the vetting
	AccountSid *string `json:"account_sid"`

	// A2P BrandRegistration Sid
	BrandSid *string `json:"brand_sid"`

	// SID for third-party vetting record
	BrandVettingSid *string `json:"brand_vetting_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The absolute URL of the Brand Vetting
	Url *string `json:"url"`

	// The type of vetting
	VettingClass *string `json:"vetting_class"`

	// The unique ID of the vetting
	VettingId *string `json:"vetting_id"`

	// Third-party provider that has conducted the vetting
	VettingProvider *MessagingV1BrandRegistrationsBrandVettingVettingProvider `json:"vetting_provider"`

	// Status of vetting attempt
	VettingStatus *string `json:"vetting_status"`
}

// Third-party provider that has conducted the vetting
type MessagingV1BrandRegistrationsBrandVettingVettingProvider string

// MessagingV1Deactivation defines model for messaging.v1.deactivation.
type MessagingV1Deactivation struct {
	// Redirect url to the list of deactivated numbers.
	RedirectTo *string `json:"redirect_to"`
}

// MessagingV1ExternalCampaign defines model for messaging.v1.external_campaign.
type MessagingV1ExternalCampaign struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// ID of the preregistered campaign.
	CampaignId *string `json:"campaign_id"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The SID of the Messaging Service the resource is associated with
	MessagingServiceSid *string `json:"messaging_service_sid"`

	// The unique string that identifies a US A2P Compliance resource
	Sid *string `json:"sid"`
}

// MessagingV1Service defines model for messaging.v1.service.
type MessagingV1Service struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Whether to enable Area Code Geomatch on the Service Instance
	AreaCodeGeomatch *bool `json:"area_code_geomatch"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The HTTP method we use to call fallback_url
	FallbackMethod *MessagingV1ServiceFallbackMethod `json:"fallback_method"`

	// Whether to enable Fallback to Long Code for messages sent through the Service instance
	FallbackToLongCode *bool `json:"fallback_to_long_code"`

	// The URL that we call using fallback_method if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.
	FallbackUrl *string `json:"fallback_url"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The HTTP method we use to call inbound_request_url
	InboundMethod *MessagingV1ServiceInboundMethod `json:"inbound_method"`

	// The URL we call using inbound_method when a message is received by any phone number or short code in the Service. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.
	InboundRequestUrl *string `json:"inbound_request_url"`

	// The absolute URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// Whether to enable the MMS Converter for messages sent through the Service instance
	MmsConverter *bool `json:"mms_converter"`

	// Reserved
	ScanMessageContent *MessagingV1ServiceScanMessageContent `json:"scan_message_content"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// Whether to enable Encoding for messages sent through the Service instance
	SmartEncoding *bool `json:"smart_encoding"`

	// The URL we call to pass status updates about message delivery
	StatusCallback *string `json:"status_callback"`

	// Whether to enable Sticky Sender on the Service instance
	StickySender *bool `json:"sticky_sender"`

	// Reserved
	SynchronousValidation *bool `json:"synchronous_validation"`

	// The absolute URL of the Service resource
	Url *string `json:"url"`

	// Whether US A2P campaign is registered for this Service.
	UsAppToPersonRegistered *bool `json:"us_app_to_person_registered"`

	// If enabled, the webhook url configured on the phone number will be used and will override the `inbound_request_url`/`fallback_url` url called when an inbound message is received.
	UseInboundWebhookOnNumber *bool `json:"use_inbound_webhook_on_number"`

	// A string describing the scenario in which the Messaging Service will be used
	Usecase *string `json:"usecase"`

	// How long, in seconds, messages sent from the Service are valid
	ValidityPeriod *int `json:"validity_period"`
}

// The HTTP method we use to call fallback_url
type MessagingV1ServiceFallbackMethod string

// The HTTP method we use to call inbound_request_url
type MessagingV1ServiceInboundMethod string

// Reserved
type MessagingV1ServiceScanMessageContent string

// MessagingV1ServiceAlphaSender defines model for messaging.v1.service.alpha_sender.
type MessagingV1ServiceAlphaSender struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The Alphanumeric Sender ID string
	AlphaSender *string `json:"alpha_sender"`

	// An array of values that describe whether the number can receive calls or messages
	Capabilities *[]string `json:"capabilities"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the AlphaSender resource
	Url *string `json:"url"`
}

// MessagingV1ServicePhoneNumber defines model for messaging.v1.service.phone_number.
type MessagingV1ServicePhoneNumber struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// An array of values that describe whether the number can receive calls or messages
	Capabilities *[]string `json:"capabilities"`

	// The 2-character ISO Country Code of the number
	CountryCode *string `json:"country_code"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the PhoneNumber resource
	Url *string `json:"url"`
}

// MessagingV1ServiceShortCode defines model for messaging.v1.service.short_code.
type MessagingV1ServiceShortCode struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// An array of values that describe whether the number can receive calls or messages
	Capabilities *[]string `json:"capabilities"`

	// The 2-character ISO Country Code of the number
	CountryCode *string `json:"country_code"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The E.164 format of the short code
	ShortCode *string `json:"short_code"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the ShortCode resource
	Url *string `json:"url"`
}

// MessagingV1ServiceUsAppToPerson defines model for messaging.v1.service.us_app_to_person.
type MessagingV1ServiceUsAppToPerson struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// A2P Brand Registration SID
	BrandRegistrationSid *string `json:"brand_registration_sid"`

	// The Campaign Registry (TCR) Campaign ID.
	CampaignId *string `json:"campaign_id"`

	// Campaign status
	CampaignStatus *string `json:"campaign_status"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// A short description of what this SMS campaign does
	Description *string `json:"description"`

	// Indicate that this SMS campaign will send messages that contain links
	HasEmbeddedLinks *bool `json:"has_embedded_links"`

	// Indicates that this SMS campaign will send messages that contain phone numbers
	HasEmbeddedPhone *bool `json:"has_embedded_phone"`

	// Indicates whether the campaign was registered externally or not
	IsExternallyRegistered *bool `json:"is_externally_registered"`

	// Message samples
	MessageSamples *[]string `json:"message_samples"`

	// The SID of the Messaging Service the resource is associated with
	MessagingServiceSid *string `json:"messaging_service_sid"`

	// A boolean that specifies whether campaign is a mock or not.
	Mock *bool `json:"mock"`

	// Rate limit and/or classification set by each carrier
	RateLimits *map[string]interface{} `json:"rate_limits"`

	// The unique string that identifies a US A2P Compliance resource
	Sid *string `json:"sid"`

	// The absolute URL of the US App to Person resource
	Url *string `json:"url"`

	// A2P Campaign Use Case.
	UsAppToPersonUsecase *string `json:"us_app_to_person_usecase"`
}

// MessagingV1ServiceUsAppToPersonUsecase defines model for messaging.v1.service.us_app_to_person_usecase.
type MessagingV1ServiceUsAppToPersonUsecase struct {
	// Human readable A2P Use Case details
	UsAppToPersonUsecases *[]map[string]interface{} `json:"us_app_to_person_usecases"`
}

// MessagingV1Usecase defines model for messaging.v1.usecase.
type MessagingV1Usecase struct {
	// Human readable Messaging Service Use Case details
	Usecases *[]map[string]interface{} `json:"usecases"`
}

// FetchDeactivationParams defines parameters for FetchDeactivation.
type FetchDeactivationParams struct {
	// The request will return a list of all United States Phone Numbers that were deactivated on the day specified by this parameter. This date should be specified in YYYY-MM-DD format.
	Date *openapi_types.Date `json:"Date,omitempty"`
}

// ListServiceParams defines parameters for ListService.
type ListServiceParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListUsAppToPersonParams defines parameters for ListUsAppToPerson.
type ListUsAppToPersonParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// FetchUsAppToPersonUsecaseParams defines parameters for FetchUsAppToPersonUsecase.
type FetchUsAppToPersonUsecaseParams struct {
	// The unique string to identify the A2P brand.
	BrandRegistrationSid *string `json:"BrandRegistrationSid,omitempty"`
}

// ListAlphaSenderParams defines parameters for ListAlphaSender.
type ListAlphaSenderParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListPhoneNumberParams defines parameters for ListPhoneNumber.
type ListPhoneNumberParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListShortCodeParams defines parameters for ListShortCode.
type ListShortCodeParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListBrandRegistrationsParams defines parameters for ListBrandRegistrations.
type ListBrandRegistrationsParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListBrandVettingParams defines parameters for ListBrandVetting.
type ListBrandVettingParams struct {
	// The third-party provider of the vettings to read
	VettingProvider *ListBrandVettingParamsVettingProvider `json:"VettingProvider,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListBrandVettingParamsVettingProvider defines parameters for ListBrandVetting.
type ListBrandVettingParamsVettingProvider string
