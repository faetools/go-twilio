// Package lookups provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package lookups

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/faetools/client"
)

// operation paths

const opPathFetchPhoneNumberFormat = "./v1/PhoneNumbers/%s"

// ClientInterface interface specification for the client.
type ClientInterface interface {
	// FetchPhoneNumber request
	FetchPhoneNumber(ctx context.Context, phoneNumber string, params *FetchPhoneNumberParams, reqEditors ...client.RequestEditorFn) (*FetchPhoneNumberResponse, error)
}

// Client definition

// compile time assert that it fulfils the interface
var _ ClientInterface = (*Client)(nil)

// Client conforms to the OpenAPI3 specification for this service.
type Client client.Client

// NewClient creates a new Client with reasonable defaults.
func NewClient(opts ...client.Option) (*Client, error) {
	c, err := client.NewClient(opts...)
	if err != nil {
		return nil, err
	}

	if c.BaseURL == nil {
		if err := client.WithBaseURL(DefaultServer)(c); err != nil {
			return nil, err
		}
	}

	return (*Client)(c), nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []client.RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}

	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}

	return nil
}

// FetchPhoneNumber: GET /v1/PhoneNumbers/{PhoneNumber}

type FetchPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LookupsV1PhoneNumber
}

// Status returns HTTPResponse.Status
func (r FetchPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newFetchPhoneNumberRequest generates requests for FetchPhoneNumber
func newFetchPhoneNumberRequest(baseURL *url.URL, phoneNumber string, params *FetchPhoneNumberParams) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("PhoneNumber", phoneNumber)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathFetchPhoneNumberFormat, pathParam0)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	q := queryURL.Query()

	if params.CountryCode != nil {
		if err := client.AddQueryParam(q, "CountryCode", *params.CountryCode); err != nil {
			return nil, err
		}
	}

	if params.Type != nil {
		if err := client.AddQueryParam(q, "Type", *params.Type); err != nil {
			return nil, err
		}
	}

	if params.AddOns != nil {
		if err := client.AddQueryParam(q, "AddOns", *params.AddOns); err != nil {
			return nil, err
		}
	}

	if params.AddOnsData != nil {
		if err := client.AddQueryParam(q, "AddOnsData", *params.AddOnsData); err != nil {
			return nil, err
		}
	}

	queryURL.RawQuery = q.Encode()

	req, err := http.NewRequest(http.MethodGet, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// FetchPhoneNumber returns a parsed response.
// GET /v1/PhoneNumbers/{PhoneNumber}
func (c *Client) FetchPhoneNumber(ctx context.Context, phoneNumber string, params *FetchPhoneNumberParams, reqEditors ...client.RequestEditorFn) (*FetchPhoneNumberResponse, error) {
	req, err := newFetchPhoneNumberRequest(c.BaseURL, phoneNumber, params)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &FetchPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LookupsV1PhoneNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
