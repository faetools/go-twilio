// Package video provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package video

import (
	"time"
)

const (
	AccountSid_authTokenScopes = "accountSid_authToken.Scopes"
)

// Defines values for VideoV1CompositionFormat.
const (
	VideoV1CompositionFormatMp4  VideoV1CompositionFormat = "mp4"
	VideoV1CompositionFormatWebm VideoV1CompositionFormat = "webm"
)

// Defines values for VideoV1CompositionStatus.
const (
	VideoV1CompositionStatusCompleted  VideoV1CompositionStatus = "completed"
	VideoV1CompositionStatusDeleted    VideoV1CompositionStatus = "deleted"
	VideoV1CompositionStatusEnqueued   VideoV1CompositionStatus = "enqueued"
	VideoV1CompositionStatusFailed     VideoV1CompositionStatus = "failed"
	VideoV1CompositionStatusProcessing VideoV1CompositionStatus = "processing"
)

// Defines values for VideoV1CompositionHookFormat.
const (
	VideoV1CompositionHookFormatMp4  VideoV1CompositionHookFormat = "mp4"
	VideoV1CompositionHookFormatWebm VideoV1CompositionHookFormat = "webm"
)

// Defines values for VideoV1CompositionHookStatusCallbackMethod.
const (
	VideoV1CompositionHookStatusCallbackMethodDELETE VideoV1CompositionHookStatusCallbackMethod = "DELETE"
	VideoV1CompositionHookStatusCallbackMethodGET    VideoV1CompositionHookStatusCallbackMethod = "GET"
	VideoV1CompositionHookStatusCallbackMethodHEAD   VideoV1CompositionHookStatusCallbackMethod = "HEAD"
	VideoV1CompositionHookStatusCallbackMethodPATCH  VideoV1CompositionHookStatusCallbackMethod = "PATCH"
	VideoV1CompositionHookStatusCallbackMethodPOST   VideoV1CompositionHookStatusCallbackMethod = "POST"
	VideoV1CompositionHookStatusCallbackMethodPUT    VideoV1CompositionHookStatusCallbackMethod = "PUT"
)

// Defines values for VideoV1RecordingCodec.
const (
	VideoV1RecordingCodecH264 VideoV1RecordingCodec = "H264"
	VideoV1RecordingCodecOPUS VideoV1RecordingCodec = "OPUS"
	VideoV1RecordingCodecPCMU VideoV1RecordingCodec = "PCMU"
	VideoV1RecordingCodecVP8  VideoV1RecordingCodec = "VP8"
)

// Defines values for VideoV1RecordingContainerFormat.
const (
	VideoV1RecordingContainerFormatMka VideoV1RecordingContainerFormat = "mka"
	VideoV1RecordingContainerFormatMkv VideoV1RecordingContainerFormat = "mkv"
)

// Defines values for VideoV1RecordingStatus.
const (
	VideoV1RecordingStatusCompleted  VideoV1RecordingStatus = "completed"
	VideoV1RecordingStatusDeleted    VideoV1RecordingStatus = "deleted"
	VideoV1RecordingStatusFailed     VideoV1RecordingStatus = "failed"
	VideoV1RecordingStatusProcessing VideoV1RecordingStatus = "processing"
)

// Defines values for VideoV1RecordingType.
const (
	VideoV1RecordingTypeAudio VideoV1RecordingType = "audio"
	VideoV1RecordingTypeData  VideoV1RecordingType = "data"
	VideoV1RecordingTypeVideo VideoV1RecordingType = "video"
)

// Defines values for VideoV1RoomStatus.
const (
	VideoV1RoomStatusCompleted  VideoV1RoomStatus = "completed"
	VideoV1RoomStatusFailed     VideoV1RoomStatus = "failed"
	VideoV1RoomStatusInProgress VideoV1RoomStatus = "in-progress"
)

// Defines values for VideoV1RoomStatusCallbackMethod.
const (
	VideoV1RoomStatusCallbackMethodDELETE VideoV1RoomStatusCallbackMethod = "DELETE"
	VideoV1RoomStatusCallbackMethodGET    VideoV1RoomStatusCallbackMethod = "GET"
	VideoV1RoomStatusCallbackMethodHEAD   VideoV1RoomStatusCallbackMethod = "HEAD"
	VideoV1RoomStatusCallbackMethodPATCH  VideoV1RoomStatusCallbackMethod = "PATCH"
	VideoV1RoomStatusCallbackMethodPOST   VideoV1RoomStatusCallbackMethod = "POST"
	VideoV1RoomStatusCallbackMethodPUT    VideoV1RoomStatusCallbackMethod = "PUT"
)

// Defines values for VideoV1RoomType.
const (
	VideoV1RoomTypeGo         VideoV1RoomType = "go"
	VideoV1RoomTypeGroup      VideoV1RoomType = "group"
	VideoV1RoomTypeGroupSmall VideoV1RoomType = "group-small"
	VideoV1RoomTypePeerToPeer VideoV1RoomType = "peer-to-peer"
)

// Defines values for VideoV1RoomVideoCodecs.
const (
	VideoV1RoomVideoCodecsH264 VideoV1RoomVideoCodecs = "H264"
	VideoV1RoomVideoCodecsVP8  VideoV1RoomVideoCodecs = "VP8"
)

// Defines values for VideoV1RoomRoomParticipantStatus.
const (
	VideoV1RoomRoomParticipantStatusConnected    VideoV1RoomRoomParticipantStatus = "connected"
	VideoV1RoomRoomParticipantStatusDisconnected VideoV1RoomRoomParticipantStatus = "disconnected"
)

// Defines values for VideoV1RoomRoomParticipantRoomParticipantPublishedTrackKind.
const (
	VideoV1RoomRoomParticipantRoomParticipantPublishedTrackKindAudio VideoV1RoomRoomParticipantRoomParticipantPublishedTrackKind = "audio"
	VideoV1RoomRoomParticipantRoomParticipantPublishedTrackKindData  VideoV1RoomRoomParticipantRoomParticipantPublishedTrackKind = "data"
	VideoV1RoomRoomParticipantRoomParticipantPublishedTrackKindVideo VideoV1RoomRoomParticipantRoomParticipantPublishedTrackKind = "video"
)

// Defines values for VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackKind.
const (
	VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackKindAudio VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackKind = "audio"
	VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackKindData  VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackKind = "data"
	VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackKindVideo VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackKind = "video"
)

// Defines values for VideoV1RoomRoomRecordingCodec.
const (
	VideoV1RoomRoomRecordingCodecH264 VideoV1RoomRoomRecordingCodec = "H264"
	VideoV1RoomRoomRecordingCodecOPUS VideoV1RoomRoomRecordingCodec = "OPUS"
	VideoV1RoomRoomRecordingCodecPCMU VideoV1RoomRoomRecordingCodec = "PCMU"
	VideoV1RoomRoomRecordingCodecVP8  VideoV1RoomRoomRecordingCodec = "VP8"
)

// Defines values for VideoV1RoomRoomRecordingContainerFormat.
const (
	VideoV1RoomRoomRecordingContainerFormatMka VideoV1RoomRoomRecordingContainerFormat = "mka"
	VideoV1RoomRoomRecordingContainerFormatMkv VideoV1RoomRoomRecordingContainerFormat = "mkv"
)

// Defines values for VideoV1RoomRoomRecordingStatus.
const (
	VideoV1RoomRoomRecordingStatusCompleted  VideoV1RoomRoomRecordingStatus = "completed"
	VideoV1RoomRoomRecordingStatusDeleted    VideoV1RoomRoomRecordingStatus = "deleted"
	VideoV1RoomRoomRecordingStatusFailed     VideoV1RoomRoomRecordingStatus = "failed"
	VideoV1RoomRoomRecordingStatusProcessing VideoV1RoomRoomRecordingStatus = "processing"
)

// Defines values for VideoV1RoomRoomRecordingType.
const (
	VideoV1RoomRoomRecordingTypeAudio VideoV1RoomRoomRecordingType = "audio"
	VideoV1RoomRoomRecordingTypeData  VideoV1RoomRoomRecordingType = "data"
	VideoV1RoomRoomRecordingTypeVideo VideoV1RoomRoomRecordingType = "video"
)

// VideoV1Composition defines model for video.v1.composition.
type VideoV1Composition struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The array of track names to include in the composition
	AudioSources *[]string `json:"audio_sources"`

	// The array of track names to exclude from the composition
	AudioSourcesExcluded *[]string `json:"audio_sources_excluded"`

	// The average bit rate of the composition's media
	Bitrate *int `json:"bitrate"`

	// Date when the media processing task finished
	DateCompleted *time.Time `json:"date_completed"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the composition generated media was deleted
	DateDeleted *time.Time `json:"date_deleted"`

	// The duration of the composition's media file in seconds
	Duration *int `json:"duration"`

	// The container format of the composition's media files as specified in the POST request that created the Composition resource
	Format *VideoV1CompositionFormat `json:"format"`

	// The URL of the media file associated with the composition
	Links *map[string]interface{} `json:"links"`

	// The URL of the media file associated with the composition when stored externally
	MediaExternalLocation *string `json:"media_external_location"`

	// The dimensions of the video image in pixels expressed as columns (width) and rows (height)
	Resolution *string `json:"resolution"`

	// The SID of the Group Room that generated the audio and video tracks used in the composition
	RoomSid *string `json:"room_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The size of the composed media file in bytes
	Size *int `json:"size"`

	// The status of the composition
	Status *VideoV1CompositionStatus `json:"status"`

	// Whether to remove intervals with no media
	Trim *bool `json:"trim"`

	// The absolute URL of the resource
	Url *string `json:"url"`

	// An object that describes the video layout of the composition
	VideoLayout *map[string]interface{} `json:"video_layout"`
}

// The container format of the composition's media files as specified in the POST request that created the Composition resource
type VideoV1CompositionFormat string

// The status of the composition
type VideoV1CompositionStatus string

// VideoV1CompositionHook defines model for video.v1.composition_hook.
type VideoV1CompositionHook struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The array of track names to include in the compositions created by the composition hook
	AudioSources *[]string `json:"audio_sources"`

	// The array of track names to exclude from the compositions created by the composition hook
	AudioSourcesExcluded *[]string `json:"audio_sources_excluded"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// Whether the CompositionHook is active
	Enabled *bool `json:"enabled"`

	// The container format of the media files used by the compositions created by the composition hook
	Format *VideoV1CompositionHookFormat `json:"format"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The dimensions of the video image in pixels expressed as columns (width) and rows (height)
	Resolution *string `json:"resolution"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The URL to send status information to your application
	StatusCallback *string `json:"status_callback"`

	// The HTTP method we should use to call status_callback
	StatusCallbackMethod *VideoV1CompositionHookStatusCallbackMethod `json:"status_callback_method"`

	// Whether intervals with no media are clipped
	Trim *bool `json:"trim"`

	// The absolute URL of the resource
	Url *string `json:"url"`

	// A JSON object that describes the video layout of the Composition
	VideoLayout *map[string]interface{} `json:"video_layout"`
}

// The container format of the media files used by the compositions created by the composition hook
type VideoV1CompositionHookFormat string

// The HTTP method we should use to call status_callback
type VideoV1CompositionHookStatusCallbackMethod string

// VideoV1CompositionSettings defines model for video.v1.composition_settings.
type VideoV1CompositionSettings struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID of the stored Credential resource
	AwsCredentialsSid *string `json:"aws_credentials_sid"`

	// The URL of the AWS S3 bucket where the compositions are stored
	AwsS3Url *string `json:"aws_s3_url"`

	// Whether all compositions are written to the aws_s3_url
	AwsStorageEnabled *bool `json:"aws_storage_enabled"`

	// Whether all compositions are stored in an encrypted form
	EncryptionEnabled *bool `json:"encryption_enabled"`

	// The SID of the Public Key resource used for encryption
	EncryptionKeySid *string `json:"encryption_key_sid"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// VideoV1Recording defines model for video.v1.recording.
type VideoV1Recording struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The codec used to encode the track
	Codec *VideoV1RecordingCodec `json:"codec"`

	// The file format for the recording
	ContainerFormat *VideoV1RecordingContainerFormat `json:"container_format"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The duration of the recording in seconds
	Duration *int `json:"duration"`

	// A list of SIDs related to the recording
	GroupingSids *map[string]interface{} `json:"grouping_sids"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The URL of the media file associated with the recording when stored externally
	MediaExternalLocation *string `json:"media_external_location"`

	// The number of milliseconds between a point in time that is common to all rooms in a group and when the source room of the recording started
	Offset *int `json:"offset"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The size of the recorded track, in bytes
	Size *int `json:"size"`

	// The SID of the recording source
	SourceSid *string `json:"source_sid"`

	// The status of the recording
	Status *VideoV1RecordingStatus `json:"status"`

	// The name that was given to the source track of the recording
	TrackName *string `json:"track_name"`

	// The recording's media type
	Type *VideoV1RecordingType `json:"type"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// The codec used to encode the track
type VideoV1RecordingCodec string

// The file format for the recording
type VideoV1RecordingContainerFormat string

// The status of the recording
type VideoV1RecordingStatus string

// The recording's media type
type VideoV1RecordingType string

// VideoV1RecordingSettings defines model for video.v1.recording_settings.
type VideoV1RecordingSettings struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID of the stored Credential resource
	AwsCredentialsSid *string `json:"aws_credentials_sid"`

	// The URL of the AWS S3 bucket where the recordings are stored
	AwsS3Url *string `json:"aws_s3_url"`

	// Whether all recordings are written to the aws_s3_url
	AwsStorageEnabled *bool `json:"aws_storage_enabled"`

	// Whether all recordings are stored in an encrypted form
	EncryptionEnabled *bool `json:"encryption_enabled"`

	// The SID of the Public Key resource used for encryption
	EncryptionKeySid *string `json:"encryption_key_sid"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// VideoV1Room defines model for video.v1.room.
type VideoV1Room struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Indicates whether the room will only contain audio track participants for group rooms.
	AudioOnly *bool `json:"audio_only"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The duration of the room in seconds
	Duration *int `json:"duration"`

	// The time a room will remain active after last participant leaves.
	EmptyRoomTimeout *int `json:"empty_room_timeout"`

	// Enable Twilio's Network Traversal TURN service
	EnableTurn *bool `json:"enable_turn"`

	// The UTC end time of the room in UTC ISO 8601 format
	EndTime *time.Time `json:"end_time"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The maximum number of published tracks allowed in the room at the same time
	MaxConcurrentPublishedTracks *int `json:"max_concurrent_published_tracks"`

	// The maximum number of seconds a Participant can be connected to the room
	MaxParticipantDuration *int `json:"max_participant_duration"`

	// The maximum number of concurrent Participants allowed in the room
	MaxParticipants *int `json:"max_participants"`

	// The region for the media server in Group Rooms
	MediaRegion *string `json:"media_region"`

	// Whether to start recording when Participants connect
	RecordParticipantsOnConnect *bool `json:"record_participants_on_connect"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the room
	Status *VideoV1RoomStatus `json:"status"`

	// The URL to send status information to your application
	StatusCallback *string `json:"status_callback"`

	// The HTTP method we use to call status_callback
	StatusCallbackMethod *VideoV1RoomStatusCallbackMethod `json:"status_callback_method"`

	// The type of room
	Type *VideoV1RoomType `json:"type"`

	// An application-defined string that uniquely identifies the resource
	UniqueName *string `json:"unique_name"`

	// The time a room will remain active when no one joins.
	UnusedRoomTimeout *int `json:"unused_room_timeout"`

	// The absolute URL of the resource
	Url *string `json:"url"`

	// An array of the video codecs that are supported when publishing a track in the room
	VideoCodecs *[]VideoV1RoomVideoCodecs `json:"video_codecs"`
}

// The status of the room
type VideoV1RoomStatus string

// The HTTP method we use to call status_callback
type VideoV1RoomStatusCallbackMethod string

// The type of room
type VideoV1RoomType string

// VideoV1RoomVideoCodecs defines model for VideoV1Room.VideoCodecs.
type VideoV1RoomVideoCodecs string

// VideoV1RoomRoomParticipant defines model for video.v1.room.room_participant.
type VideoV1RoomRoomParticipant struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// Duration of time in seconds the participant was connected
	Duration *int `json:"duration"`

	// The time when the participant disconnected from the room in ISO 8601 format
	EndTime *time.Time `json:"end_time"`

	// The string that identifies the resource's User
	Identity *string `json:"identity"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The SID of the participant's room
	RoomSid *string `json:"room_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The time of participant connected to the room in ISO 8601 format
	StartTime *time.Time `json:"start_time"`

	// The status of the Participant
	Status *VideoV1RoomRoomParticipantStatus `json:"status"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// The status of the Participant
type VideoV1RoomRoomParticipantStatus string

// VideoV1RoomRoomParticipantRoomParticipantPublishedTrack defines model for video.v1.room.room_participant.room_participant_published_track.
type VideoV1RoomRoomParticipantRoomParticipantPublishedTrack struct {
	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// Whether the track is enabled
	Enabled *bool `json:"enabled"`

	// The track type
	Kind *VideoV1RoomRoomParticipantRoomParticipantPublishedTrackKind `json:"kind"`

	// The track name
	Name *string `json:"name"`

	// The SID of the Participant resource with the published track
	ParticipantSid *string `json:"participant_sid"`

	// The SID of the Room resource where the track is published
	RoomSid *string `json:"room_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// The track type
type VideoV1RoomRoomParticipantRoomParticipantPublishedTrackKind string

// VideoV1RoomRoomParticipantRoomParticipantSubscribeRule defines model for video.v1.room.room_participant.room_participant_subscribe_rule.
type VideoV1RoomRoomParticipantRoomParticipantSubscribeRule struct {
	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The SID of the Participant resource for the Subscribe Rules
	ParticipantSid *string `json:"participant_sid"`

	// The SID of the Room resource for the Subscribe Rules
	RoomSid *string `json:"room_sid"`

	// A collection of Subscribe Rules that describe how to include or exclude matching tracks
	Rules *[]map[string]interface{} `json:"rules"`
}

// VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack defines model for video.v1.room.room_participant.room_participant_subscribed_track.
type VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack struct {
	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// Whether the track is enabled
	Enabled *bool `json:"enabled"`

	// The track type
	Kind *VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackKind `json:"kind"`

	// The track name
	Name *string `json:"name"`

	// The SID of the participant that subscribes to the track
	ParticipantSid *string `json:"participant_sid"`

	// The SID of the participant that publishes the track
	PublisherSid *string `json:"publisher_sid"`

	// The SID of the room where the track is published
	RoomSid *string `json:"room_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// The track type
type VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackKind string

// VideoV1RoomRoomRecording defines model for video.v1.room.room_recording.
type VideoV1RoomRoomRecording struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The codec used for the recording
	Codec *VideoV1RoomRoomRecordingCodec `json:"codec"`

	// The file format for the recording
	ContainerFormat *VideoV1RoomRoomRecordingContainerFormat `json:"container_format"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The duration of the recording in seconds
	Duration *int `json:"duration"`

	// A list of SIDs related to the Recording
	GroupingSids *map[string]interface{} `json:"grouping_sids"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The URL of the media file associated with the recording when stored externally
	MediaExternalLocation *string `json:"media_external_location"`

	// The number of milliseconds between a point in time that is common to all rooms in a group and when the source room of the recording started
	Offset *int `json:"offset"`

	// The SID of the Room resource the recording is associated with
	RoomSid *string `json:"room_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The size of the recorded track in bytes
	Size *int `json:"size"`

	// The SID of the recording source
	SourceSid *string `json:"source_sid"`

	// The status of the recording
	Status *VideoV1RoomRoomRecordingStatus `json:"status"`

	// The name that was given to the source track of the recording
	TrackName *string `json:"track_name"`

	// The recording's media type
	Type *VideoV1RoomRoomRecordingType `json:"type"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// The codec used for the recording
type VideoV1RoomRoomRecordingCodec string

// The file format for the recording
type VideoV1RoomRoomRecordingContainerFormat string

// The status of the recording
type VideoV1RoomRoomRecordingStatus string

// The recording's media type
type VideoV1RoomRoomRecordingType string

// VideoV1RoomRoomRecordingRule defines model for video.v1.room.room_recording_rule.
type VideoV1RoomRoomRecordingRule struct {
	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The SID of the Room resource for the Recording Rules
	RoomSid *string `json:"room_sid"`

	// A collection of recording Rules that describe how to include or exclude matching tracks for recording
	Rules *[]struct {
		All       *bool   `json:"all,omitempty"`
		Kind      *string `json:"kind,omitempty"`
		Publisher *string `json:"publisher,omitempty"`
		Track     *string `json:"track,omitempty"`
		Type      *string `json:"type,omitempty"`
	} `json:"rules"`
}

// ListCompositionHookParams defines parameters for ListCompositionHook.
type ListCompositionHookParams struct {
	// Read only CompositionHook resources with an `enabled` value that matches this parameter.
	Enabled *bool `json:"Enabled,omitempty"`

	// Read only CompositionHook resources created on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`

	// Read only CompositionHook resources created before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`

	// Read only CompositionHook resources with friendly names that match this string. The match is not case sensitive and can include asterisk `*` characters as wildcard match.
	FriendlyName *string `json:"FriendlyName,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListCompositionParams defines parameters for ListComposition.
type ListCompositionParams struct {
	// Read only Composition resources with this status. Can be: `enqueued`, `processing`, `completed`, `deleted`, or `failed`.
	Status *ListCompositionParamsStatus `json:"Status,omitempty"`

	// Read only Composition resources created on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with time zone.
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`

	// Read only Composition resources created before this ISO 8601 date-time with time zone.
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`

	// Read only Composition resources with this Room SID.
	RoomSid *string `json:"RoomSid,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListCompositionParamsStatus defines parameters for ListComposition.
type ListCompositionParamsStatus string

// ListRecordingParams defines parameters for ListRecording.
type ListRecordingParams struct {
	// Read only the recordings that have this status. Can be: `processing`, `completed`, or `deleted`.
	Status *ListRecordingParamsStatus `json:"Status,omitempty"`

	// Read only the recordings that have this `source_sid`.
	SourceSid *string `json:"SourceSid,omitempty"`

	// Read only recordings with this `grouping_sid`, which may include a `participant_sid` and/or a `room_sid`.
	GroupingSid *[]string `json:"GroupingSid,omitempty"`

	// Read only recordings that started on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with time zone.
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`

	// Read only recordings that started before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with time zone, given as `YYYY-MM-DDThh:mm:ss+|-hh:mm` or `YYYY-MM-DDThh:mm:ssZ`.
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`

	// Read only recordings that have this media type. Can be either `audio` or `video`.
	MediaType *ListRecordingParamsMediaType `json:"MediaType,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListRecordingParamsStatus defines parameters for ListRecording.
type ListRecordingParamsStatus string

// ListRecordingParamsMediaType defines parameters for ListRecording.
type ListRecordingParamsMediaType string

// ListRoomParams defines parameters for ListRoom.
type ListRoomParams struct {
	// Read only the rooms with this status. Can be: `in-progress` (default) or `completed`
	Status *ListRoomParamsStatus `json:"Status,omitempty"`

	// Read only rooms with the this `unique_name`.
	UniqueName *string `json:"UniqueName,omitempty"`

	// Read only rooms that started on or after this date, given as `YYYY-MM-DD`.
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`

	// Read only rooms that started before this date, given as `YYYY-MM-DD`.
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListRoomParamsStatus defines parameters for ListRoom.
type ListRoomParamsStatus string

// ListRoomParticipantParams defines parameters for ListRoomParticipant.
type ListRoomParticipantParams struct {
	// Read only the participants with this status. Can be: `connected` or `disconnected`. For `in-progress` Rooms the default Status is `connected`, for `completed` Rooms only `disconnected` Participants are returned.
	Status *ListRoomParticipantParamsStatus `json:"Status,omitempty"`

	// Read only the Participants with this [User](https://www.twilio.com/docs/chat/rest/user-resource) `identity` value.
	Identity *string `json:"Identity,omitempty"`

	// Read only Participants that started after this date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`

	// Read only Participants that started before this date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListRoomParticipantParamsStatus defines parameters for ListRoomParticipant.
type ListRoomParticipantParamsStatus string

// ListRoomParticipantPublishedTrackParams defines parameters for ListRoomParticipantPublishedTrack.
type ListRoomParticipantPublishedTrackParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListRoomParticipantSubscribedTrackParams defines parameters for ListRoomParticipantSubscribedTrack.
type ListRoomParticipantSubscribedTrackParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListRoomRecordingParams defines parameters for ListRoomRecording.
type ListRoomRecordingParams struct {
	// Read only the recordings with this status. Can be: `processing`, `completed`, or `deleted`.
	Status *ListRoomRecordingParamsStatus `json:"Status,omitempty"`

	// Read only the recordings that have this `source_sid`.
	SourceSid *string `json:"SourceSid,omitempty"`

	// Read only recordings that started on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`

	// Read only Recordings that started before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListRoomRecordingParamsStatus defines parameters for ListRoomRecording.
type ListRoomRecordingParamsStatus string
