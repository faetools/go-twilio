// Package chat provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package chat

import (
	"time"
)

const (
	AccountSid_authTokenScopes = "accountSid_authToken.Scopes"
)

// Defines values for ChatV2CredentialType.
const (
	ChatV2CredentialTypeApn ChatV2CredentialType = "apn"
	ChatV2CredentialTypeFcm ChatV2CredentialType = "fcm"
	ChatV2CredentialTypeGcm ChatV2CredentialType = "gcm"
)

// Defines values for ChatV2ServiceBindingBindingType.
const (
	ChatV2ServiceBindingBindingTypeApn ChatV2ServiceBindingBindingType = "apn"
	ChatV2ServiceBindingBindingTypeFcm ChatV2ServiceBindingBindingType = "fcm"
	ChatV2ServiceBindingBindingTypeGcm ChatV2ServiceBindingBindingType = "gcm"
)

// Defines values for ChatV2ServiceChannelType.
const (
	ChatV2ServiceChannelTypePrivate ChatV2ServiceChannelType = "private"
	ChatV2ServiceChannelTypePublic  ChatV2ServiceChannelType = "public"
)

// Defines values for ChatV2ServiceRoleType.
const (
	ChatV2ServiceRoleTypeChannel    ChatV2ServiceRoleType = "channel"
	ChatV2ServiceRoleTypeDeployment ChatV2ServiceRoleType = "deployment"
)

// Defines values for ChatV2ServiceUserUserBindingBindingType.
const (
	ChatV2ServiceUserUserBindingBindingTypeApn ChatV2ServiceUserUserBindingBindingType = "apn"
	ChatV2ServiceUserUserBindingBindingTypeFcm ChatV2ServiceUserUserBindingBindingType = "fcm"
	ChatV2ServiceUserUserBindingBindingTypeGcm ChatV2ServiceUserUserBindingBindingType = "gcm"
)

// Defines values for ChatV2ServiceUserUserChannelNotificationLevel.
const (
	ChatV2ServiceUserUserChannelNotificationLevelDefault ChatV2ServiceUserUserChannelNotificationLevel = "default"
	ChatV2ServiceUserUserChannelNotificationLevelMuted   ChatV2ServiceUserUserChannelNotificationLevel = "muted"
)

// Defines values for ChatV2ServiceUserUserChannelStatus.
const (
	ChatV2ServiceUserUserChannelStatusInvited          ChatV2ServiceUserUserChannelStatus = "invited"
	ChatV2ServiceUserUserChannelStatusJoined           ChatV2ServiceUserUserChannelStatus = "joined"
	ChatV2ServiceUserUserChannelStatusNotParticipating ChatV2ServiceUserUserChannelStatus = "not_participating"
)

// ChatV2Credential defines model for chat.v2.credential.
type ChatV2Credential struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// [APN only] Whether to send the credential to sandbox APNs
	Sandbox *string `json:"sandbox"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The type of push-notification service the credential is for
	Type *ChatV2CredentialType `json:"type"`

	// The absolute URL of the Credential resource
	Url *string `json:"url"`
}

// The type of push-notification service the credential is for
type ChatV2CredentialType string

// ChatV2Service defines model for chat.v2.service.
type ChatV2Service struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// DEPRECATED
	ConsumptionReportInterval *int `json:"consumption_report_interval"`

	// The RFC 2822 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The RFC 2822 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The channel role assigned to a channel creator when they join a new channel
	DefaultChannelCreatorRoleSid *string `json:"default_channel_creator_role_sid"`

	// The channel role assigned to users when they are added to a channel
	DefaultChannelRoleSid *string `json:"default_channel_role_sid"`

	// The service role assigned to users when they are added to the service
	DefaultServiceRoleSid *string `json:"default_service_role_sid"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// An object that describes the limits of the service instance
	Limits *map[string]interface{} `json:"limits"`

	// The absolute URLs of the Service's Channels, Roles, and Users
	Links *map[string]interface{} `json:"links"`

	// The properties of the media that the service supports
	Media *map[string]interface{} `json:"media"`

	// The notification configuration for the Service instance
	Notifications *map[string]interface{} `json:"notifications"`

	// The number of times calls to the `post_webhook_url` will be retried
	PostWebhookRetryCount *int `json:"post_webhook_retry_count"`

	// The URL for post-event webhooks
	PostWebhookUrl *string `json:"post_webhook_url"`

	// Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses
	PreWebhookRetryCount *int `json:"pre_webhook_retry_count"`

	// The webhook URL for pre-event webhooks
	PreWebhookUrl *string `json:"pre_webhook_url"`

	// Whether the Reachability Indicator feature is enabled for this Service instance
	ReachabilityEnabled *bool `json:"reachability_enabled"`

	// Whether the Message Consumption Horizon feature is enabled
	ReadStatusEnabled *bool `json:"read_status_enabled"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// How long in seconds to wait before assuming the user is no longer typing
	TypingIndicatorTimeout *int `json:"typing_indicator_timeout"`

	// The absolute URL of the Service resource
	Url *string `json:"url"`

	// The list of webhook events that are enabled for this Service instance
	WebhookFilters *[]string `json:"webhook_filters"`

	// The HTTP method  to use for both PRE and POST webhooks
	WebhookMethod *string `json:"webhook_method"`
}

// ChatV2ServiceBinding defines model for chat.v2.service.binding.
type ChatV2ServiceBinding struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The push technology to use for the binding
	BindingType *ChatV2ServiceBindingBindingType `json:"binding_type"`

	// The SID of the Credential for the binding
	CredentialSid *string `json:"credential_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The unique endpoint identifier for the Binding
	Endpoint *string `json:"endpoint"`

	// The string that identifies the resource's User
	Identity *string `json:"identity"`

	// The absolute URLs of the Binding's User
	Links *map[string]interface{} `json:"links"`

	// The Programmable Chat message types the binding is subscribed to
	MessageTypes *[]string `json:"message_types"`

	// The SID of the Service that the Binding resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the Binding resource
	Url *string `json:"url"`
}

// The push technology to use for the binding
type ChatV2ServiceBindingBindingType string

// ChatV2ServiceChannel defines model for chat.v2.service.channel.
type ChatV2ServiceChannel struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The JSON string that stores application-specific data
	Attributes *string `json:"attributes"`

	// The identity of the User that created the channel
	CreatedBy *string `json:"created_by"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// Absolute URLs to access the Members, Messages , Invites and, if it exists, the last Message for the Channel
	Links *map[string]interface{} `json:"links"`

	// The number of Members in the Channel
	MembersCount *int `json:"members_count"`

	// The number of Messages that have been passed in the Channel
	MessagesCount *int `json:"messages_count"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The visibility of the channel. Can be: `public` or `private`
	Type *ChatV2ServiceChannelType `json:"type"`

	// An application-defined string that uniquely identifies the resource
	UniqueName *string `json:"unique_name"`

	// The absolute URL of the Channel resource
	Url *string `json:"url"`
}

// The visibility of the channel. Can be: `public` or `private`
type ChatV2ServiceChannelType string

// ChatV2ServiceChannelChannelWebhook defines model for chat.v2.service.channel.channel_webhook.
type ChatV2ServiceChannelChannelWebhook struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID of the Channel the Channel Webhook resource belongs to
	ChannelSid *string `json:"channel_sid"`

	// The JSON string that describes the configuration object for the channel webhook
	Configuration *map[string]interface{} `json:"configuration"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The SID of the Service that the Channel Webhook resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The type of webhook
	Type *string `json:"type"`

	// The absolute URL of the Channel Webhook resource
	Url *string `json:"url"`
}

// ChatV2ServiceChannelInvite defines model for chat.v2.service.channel.invite.
type ChatV2ServiceChannelInvite struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID of the Channel the new resource belongs to
	ChannelSid *string `json:"channel_sid"`

	// The identity of the User that created the invite
	CreatedBy *string `json:"created_by"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The string that identifies the resource's User
	Identity *string `json:"identity"`

	// The SID of the Role assigned to the member
	RoleSid *string `json:"role_sid"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the Invite resource
	Url *string `json:"url"`
}

// ChatV2ServiceChannelMember defines model for chat.v2.service.channel.member.
type ChatV2ServiceChannelMember struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The JSON string that stores application-specific data
	Attributes *string `json:"attributes"`

	// The SID of the Channel for the member
	ChannelSid *string `json:"channel_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The string that identifies the resource's User
	Identity *string `json:"identity"`

	// The index of the last Message that the Member has read within the Channel
	LastConsumedMessageIndex *int `json:"last_consumed_message_index"`

	// The ISO 8601 based timestamp string that represents the datetime of the last Message read event for the Member within the Channel
	LastConsumptionTimestamp *time.Time `json:"last_consumption_timestamp"`

	// The SID of the Role assigned to the member
	RoleSid *string `json:"role_sid"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the Member resource
	Url *string `json:"url"`
}

// ChatV2ServiceChannelMessage defines model for chat.v2.service.channel.message.
type ChatV2ServiceChannelMessage struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The JSON string that stores application-specific data
	Attributes *string `json:"attributes"`

	// The content of the message
	Body *string `json:"body"`

	// The SID of the Channel the Message resource belongs to
	ChannelSid *string `json:"channel_sid"`

	// The RFC 2822 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The RFC 2822 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The Identity of the message's author
	From *string `json:"from"`

	// The index of the message within the Channel
	Index *int `json:"index"`

	// The Identity of the User who last updated the Message
	LastUpdatedBy *string `json:"last_updated_by"`

	// A Media object that describes the Message's media if attached; otherwise, null
	Media *map[string]interface{} `json:"media"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The SID of the Channel that the message was sent to
	To *string `json:"to"`

	// The Message type
	Type *string `json:"type"`

	// The absolute URL of the Message resource
	Url *string `json:"url"`

	// Whether the message has been edited since  it was created
	WasEdited *bool `json:"was_edited"`
}

// ChatV2ServiceRole defines model for chat.v2.service.role.
type ChatV2ServiceRole struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// An array of the permissions the role has been granted
	Permissions *[]string `json:"permissions"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The type of role
	Type *ChatV2ServiceRoleType `json:"type"`

	// The absolute URL of the Role resource
	Url *string `json:"url"`
}

// The type of role
type ChatV2ServiceRoleType string

// ChatV2ServiceUser defines model for chat.v2.service.user.
type ChatV2ServiceUser struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The JSON string that stores application-specific data
	Attributes *string `json:"attributes"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The string that identifies the resource's User
	Identity *string `json:"identity"`

	// Whether the User has a potentially valid Push Notification registration for the Service instance
	IsNotifiable *bool `json:"is_notifiable"`

	// Whether the User is actively connected to the Service instance and online
	IsOnline *bool `json:"is_online"`

	// The number of Channels the User is a Member of
	JoinedChannelsCount *int `json:"joined_channels_count"`

	// The absolute URLs of the Channel and Binding resources related to the user
	Links *map[string]interface{} `json:"links"`

	// The SID of the Role assigned to the user
	RoleSid *string `json:"role_sid"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the User resource
	Url *string `json:"url"`
}

// ChatV2ServiceUserUserBinding defines model for chat.v2.service.user.user_binding.
type ChatV2ServiceUserUserBinding struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The push technology to use for the binding
	BindingType *ChatV2ServiceUserUserBindingBindingType `json:"binding_type"`

	// The SID of the Credential for the binding
	CredentialSid *string `json:"credential_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The unique endpoint identifier for the User Binding
	Endpoint *string `json:"endpoint"`

	// The string that identifies the resource's User
	Identity *string `json:"identity"`

	// The Programmable Chat message types the binding is subscribed to
	MessageTypes *[]string `json:"message_types"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The absolute URL of the User Binding resource
	Url *string `json:"url"`

	// The SID of the User with the binding
	UserSid *string `json:"user_sid"`
}

// The push technology to use for the binding
type ChatV2ServiceUserUserBindingBindingType string

// ChatV2ServiceUserUserChannel defines model for chat.v2.service.user.user_channel.
type ChatV2ServiceUserUserChannel struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID of the Channel the resource belongs to
	ChannelSid *string `json:"channel_sid"`

	// The index of the last Message in the Channel the Member has read
	LastConsumedMessageIndex *int `json:"last_consumed_message_index"`

	// Absolute URLs to access the Members, Messages , Invites and, if it exists, the last Message for the Channel
	Links *map[string]interface{} `json:"links"`

	// The SID of the User as a Member in the Channel
	MemberSid *string `json:"member_sid"`

	// The push notification level of the User for the Channel
	NotificationLevel *ChatV2ServiceUserUserChannelNotificationLevel `json:"notification_level"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The status of the User on the Channel
	Status *ChatV2ServiceUserUserChannelStatus `json:"status"`

	// The number of unread Messages in the Channel for the User
	UnreadMessagesCount *int `json:"unread_messages_count"`

	// The absolute URL of the resource
	Url *string `json:"url"`

	// The SID of the User the User Channel belongs to
	UserSid *string `json:"user_sid"`
}

// The push notification level of the User for the Channel
type ChatV2ServiceUserUserChannelNotificationLevel string

// The status of the User on the Channel
type ChatV2ServiceUserUserChannelStatus string

// ListCredentialParams defines parameters for ListCredential.
type ListCredentialParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListServiceParams defines parameters for ListService.
type ListServiceParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListBindingParams defines parameters for ListBinding.
type ListBindingParams struct {
	// The push technology used by the Binding resources to read.  Can be: `apn`, `gcm`, or `fcm`.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
	BindingType *[]ListBindingParamsBindingType `json:"BindingType,omitempty"`

	// The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more details.
	Identity *[]string `json:"Identity,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListBindingParamsBindingType defines parameters for ListBinding.
type ListBindingParamsBindingType string

// ListChannelParams defines parameters for ListChannel.
type ListChannelParams struct {
	// The visibility of the Channels to read. Can be: `public` or `private` and defaults to `public`.
	Type *[]ListChannelParamsType `json:"Type,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListChannelParamsType defines parameters for ListChannel.
type ListChannelParamsType string

// CreateChannelParams defines parameters for CreateChannel.
type CreateChannelParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *CreateChannelParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// CreateChannelParamsXTwilioWebhookEnabled defines parameters for CreateChannel.
type CreateChannelParamsXTwilioWebhookEnabled string

// ListInviteParams defines parameters for ListInvite.
type ListInviteParams struct {
	// The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more details.
	Identity *[]string `json:"Identity,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListMemberParams defines parameters for ListMember.
type ListMemberParams struct {
	// The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the Member resources to read. See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more details.
	Identity *[]string `json:"Identity,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// CreateMemberParams defines parameters for CreateMember.
type CreateMemberParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *CreateMemberParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// CreateMemberParamsXTwilioWebhookEnabled defines parameters for CreateMember.
type CreateMemberParamsXTwilioWebhookEnabled string

// DeleteMemberParams defines parameters for DeleteMember.
type DeleteMemberParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *DeleteMemberParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// DeleteMemberParamsXTwilioWebhookEnabled defines parameters for DeleteMember.
type DeleteMemberParamsXTwilioWebhookEnabled string

// UpdateMemberParams defines parameters for UpdateMember.
type UpdateMemberParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *UpdateMemberParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// UpdateMemberParamsXTwilioWebhookEnabled defines parameters for UpdateMember.
type UpdateMemberParamsXTwilioWebhookEnabled string

// ListMessageParams defines parameters for ListMessage.
type ListMessageParams struct {
	// The sort order of the returned messages. Can be: `asc` (ascending) or `desc` (descending) with `asc` as the default.
	Order *ListMessageParamsOrder `json:"Order,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListMessageParamsOrder defines parameters for ListMessage.
type ListMessageParamsOrder string

// CreateMessageParams defines parameters for CreateMessage.
type CreateMessageParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *CreateMessageParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// CreateMessageParamsXTwilioWebhookEnabled defines parameters for CreateMessage.
type CreateMessageParamsXTwilioWebhookEnabled string

// DeleteMessageParams defines parameters for DeleteMessage.
type DeleteMessageParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *DeleteMessageParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// DeleteMessageParamsXTwilioWebhookEnabled defines parameters for DeleteMessage.
type DeleteMessageParamsXTwilioWebhookEnabled string

// UpdateMessageParams defines parameters for UpdateMessage.
type UpdateMessageParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *UpdateMessageParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// UpdateMessageParamsXTwilioWebhookEnabled defines parameters for UpdateMessage.
type UpdateMessageParamsXTwilioWebhookEnabled string

// ListChannelWebhookParams defines parameters for ListChannelWebhook.
type ListChannelWebhookParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// DeleteChannelParams defines parameters for DeleteChannel.
type DeleteChannelParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *DeleteChannelParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// DeleteChannelParamsXTwilioWebhookEnabled defines parameters for DeleteChannel.
type DeleteChannelParamsXTwilioWebhookEnabled string

// UpdateChannelParams defines parameters for UpdateChannel.
type UpdateChannelParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *UpdateChannelParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// UpdateChannelParamsXTwilioWebhookEnabled defines parameters for UpdateChannel.
type UpdateChannelParamsXTwilioWebhookEnabled string

// ListRoleParams defines parameters for ListRole.
type ListRoleParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListUserParams defines parameters for ListUser.
type ListUserParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// CreateUserParams defines parameters for CreateUser.
type CreateUserParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *CreateUserParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// CreateUserParamsXTwilioWebhookEnabled defines parameters for CreateUser.
type CreateUserParamsXTwilioWebhookEnabled string

// UpdateUserParams defines parameters for UpdateUser.
type UpdateUserParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *UpdateUserParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// UpdateUserParamsXTwilioWebhookEnabled defines parameters for UpdateUser.
type UpdateUserParamsXTwilioWebhookEnabled string

// ListUserBindingParams defines parameters for ListUserBinding.
type ListUserBindingParams struct {
	// The push technology used by the User Binding resources to read. Can be: `apn`, `gcm`, or `fcm`.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
	BindingType *[]ListUserBindingParamsBindingType `json:"BindingType,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListUserBindingParamsBindingType defines parameters for ListUserBinding.
type ListUserBindingParamsBindingType string

// ListUserChannelParams defines parameters for ListUserChannel.
type ListUserChannelParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// DeleteUserChannelParams defines parameters for DeleteUserChannel.
type DeleteUserChannelParams struct {
	// The X-Twilio-Webhook-Enabled HTTP request header
	XTwilioWebhookEnabled *DeleteUserChannelParamsXTwilioWebhookEnabled `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

// DeleteUserChannelParamsXTwilioWebhookEnabled defines parameters for DeleteUserChannel.
type DeleteUserChannelParamsXTwilioWebhookEnabled string
