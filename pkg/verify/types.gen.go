// Package verify provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package verify

import (
	"time"
)

const (
	AccountSid_authTokenScopes = "accountSid_authToken.Scopes"
)

// Defines values for VerifyV2FormFormType.
const (
	VerifyV2FormFormTypeFormPush VerifyV2FormFormType = "form-push"
)

// Defines values for VerifyV2ServiceAccessTokenFactorType.
const (
	VerifyV2ServiceAccessTokenFactorTypePush VerifyV2ServiceAccessTokenFactorType = "push"
)

// Defines values for VerifyV2ServiceEntityChallengeFactorType.
const (
	VerifyV2ServiceEntityChallengeFactorTypePush VerifyV2ServiceEntityChallengeFactorType = "push"
	VerifyV2ServiceEntityChallengeFactorTypeTotp VerifyV2ServiceEntityChallengeFactorType = "totp"
)

// Defines values for VerifyV2ServiceEntityChallengeRespondedReason.
const (
	VerifyV2ServiceEntityChallengeRespondedReasonNone         VerifyV2ServiceEntityChallengeRespondedReason = "none"
	VerifyV2ServiceEntityChallengeRespondedReasonNotNeeded    VerifyV2ServiceEntityChallengeRespondedReason = "not_needed"
	VerifyV2ServiceEntityChallengeRespondedReasonNotRequested VerifyV2ServiceEntityChallengeRespondedReason = "not_requested"
)

// Defines values for VerifyV2ServiceEntityChallengeStatus.
const (
	VerifyV2ServiceEntityChallengeStatusApproved VerifyV2ServiceEntityChallengeStatus = "approved"
	VerifyV2ServiceEntityChallengeStatusDenied   VerifyV2ServiceEntityChallengeStatus = "denied"
	VerifyV2ServiceEntityChallengeStatusExpired  VerifyV2ServiceEntityChallengeStatus = "expired"
	VerifyV2ServiceEntityChallengeStatusPending  VerifyV2ServiceEntityChallengeStatus = "pending"
)

// Defines values for VerifyV2ServiceEntityFactorFactorType.
const (
	VerifyV2ServiceEntityFactorFactorTypePush VerifyV2ServiceEntityFactorFactorType = "push"
	VerifyV2ServiceEntityFactorFactorTypeTotp VerifyV2ServiceEntityFactorFactorType = "totp"
)

// Defines values for VerifyV2ServiceEntityFactorStatus.
const (
	VerifyV2ServiceEntityFactorStatusUnverified VerifyV2ServiceEntityFactorStatus = "unverified"
	VerifyV2ServiceEntityFactorStatusVerified   VerifyV2ServiceEntityFactorStatus = "verified"
)

// Defines values for VerifyV2ServiceEntityNewFactorFactorType.
const (
	VerifyV2ServiceEntityNewFactorFactorTypePush VerifyV2ServiceEntityNewFactorFactorType = "push"
	VerifyV2ServiceEntityNewFactorFactorTypeTotp VerifyV2ServiceEntityNewFactorFactorType = "totp"
)

// Defines values for VerifyV2ServiceEntityNewFactorStatus.
const (
	VerifyV2ServiceEntityNewFactorStatusUnverified VerifyV2ServiceEntityNewFactorStatus = "unverified"
	VerifyV2ServiceEntityNewFactorStatusVerified   VerifyV2ServiceEntityNewFactorStatus = "verified"
)

// Defines values for VerifyV2ServiceVerificationChannel.
const (
	VerifyV2ServiceVerificationChannelCall     VerifyV2ServiceVerificationChannel = "call"
	VerifyV2ServiceVerificationChannelEmail    VerifyV2ServiceVerificationChannel = "email"
	VerifyV2ServiceVerificationChannelSms      VerifyV2ServiceVerificationChannel = "sms"
	VerifyV2ServiceVerificationChannelWhatsapp VerifyV2ServiceVerificationChannel = "whatsapp"
)

// Defines values for VerifyV2ServiceVerificationCheckChannel.
const (
	VerifyV2ServiceVerificationCheckChannelCall     VerifyV2ServiceVerificationCheckChannel = "call"
	VerifyV2ServiceVerificationCheckChannelEmail    VerifyV2ServiceVerificationCheckChannel = "email"
	VerifyV2ServiceVerificationCheckChannelSms      VerifyV2ServiceVerificationCheckChannel = "sms"
	VerifyV2ServiceVerificationCheckChannelWhatsapp VerifyV2ServiceVerificationCheckChannel = "whatsapp"
)

// Defines values for VerifyV2ServiceWebhookStatus.
const (
	VerifyV2ServiceWebhookStatusDisabled VerifyV2ServiceWebhookStatus = "disabled"
	VerifyV2ServiceWebhookStatusEnabled  VerifyV2ServiceWebhookStatus = "enabled"
)

// Defines values for VerifyV2ServiceWebhookVersion.
const (
	VerifyV2ServiceWebhookVersionV1 VerifyV2ServiceWebhookVersion = "v1"
	VerifyV2ServiceWebhookVersionV2 VerifyV2ServiceWebhookVersion = "v2"
)

// Defines values for VerifyV2ServiceWebhookWebhookMethod.
const (
	VerifyV2ServiceWebhookWebhookMethodGET  VerifyV2ServiceWebhookWebhookMethod = "GET"
	VerifyV2ServiceWebhookWebhookMethodPOST VerifyV2ServiceWebhookWebhookMethod = "POST"
)

// Defines values for VerifyV2VerificationAttemptChannel.
const (
	VerifyV2VerificationAttemptChannelCall     VerifyV2VerificationAttemptChannel = "call"
	VerifyV2VerificationAttemptChannelEmail    VerifyV2VerificationAttemptChannel = "email"
	VerifyV2VerificationAttemptChannelSms      VerifyV2VerificationAttemptChannel = "sms"
	VerifyV2VerificationAttemptChannelWhatsapp VerifyV2VerificationAttemptChannel = "whatsapp"
)

// Defines values for VerifyV2VerificationAttemptConversionStatus.
const (
	VerifyV2VerificationAttemptConversionStatusConverted   VerifyV2VerificationAttemptConversionStatus = "converted"
	VerifyV2VerificationAttemptConversionStatusUnconverted VerifyV2VerificationAttemptConversionStatus = "unconverted"
)

// VerifyV2Form defines model for verify.v2.form.
type VerifyV2Form struct {
	// Additional information for the available forms for this type.
	FormMeta *map[string]interface{} `json:"form_meta"`

	// The Type of this Form
	FormType *VerifyV2FormFormType `json:"form_type"`

	// Object that contains the available forms for this type.
	Forms *map[string]interface{} `json:"forms"`

	// The URL to access the forms for this type.
	Url *string `json:"url"`
}

// The Type of this Form
type VerifyV2FormFormType string

// VerifyV2Service defines model for verify.v2.service.
type VerifyV2Service struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The length of the verification code
	CodeLength *int `json:"code_length"`

	// Whether to allow sending verifications with a custom code.
	CustomCodeEnabled *bool `json:"custom_code_enabled"`

	// The RFC 2822 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The RFC 2822 date and time in GMT when the resource was last updated
	DateUpdated        *time.Time `json:"date_updated"`
	DefaultTemplateSid *string    `json:"default_template_sid"`

	// Whether to add a security warning at the end of an SMS.
	DoNotShareWarningEnabled *bool `json:"do_not_share_warning_enabled"`

	// Whether to ask the user to press a number before delivering the verify code in a phone call
	DtmfInputRequired *bool `json:"dtmf_input_required"`

	// The string that you assigned to describe the verification service
	FriendlyName *string `json:"friendly_name"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// Whether to perform a lookup with each verification
	LookupEnabled *bool `json:"lookup_enabled"`

	// Whether to pass PSD2 transaction parameters when starting a verification
	Psd2Enabled *bool `json:"psd2_enabled"`

	// The service level configuration of factor push type.
	Push *map[string]interface{} `json:"push"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// Whether to skip sending SMS verifications to landlines
	SkipSmsToLandlines *bool `json:"skip_sms_to_landlines"`

	// The service level configuration of factor TOTP type.
	Totp *map[string]interface{} `json:"totp"`

	// The name of an alternative text-to-speech service to use in phone calls
	TtsName *string `json:"tts_name"`

	// The absolute URL of the resource
	Url *string `json:"url"`
}

// VerifyV2ServiceAccessToken defines model for verify.v2.service.access_token.
type VerifyV2ServiceAccessToken struct {
	// Account Sid.
	AccountSid *string `json:"account_sid"`

	// The date this access token was created
	DateCreated *time.Time `json:"date_created"`

	// Unique external identifier of the Entity
	EntityIdentity *string `json:"entity_identity"`

	// A human readable description of this factor.
	FactorFriendlyName *string `json:"factor_friendly_name"`

	// The Type of the Factor
	FactorType *VerifyV2ServiceAccessTokenFactorType `json:"factor_type"`

	// Verify Service Sid.
	ServiceSid *string `json:"service_sid"`

	// A string that uniquely identifies this Access Token.
	Sid *string `json:"sid"`

	// Generated access token.
	Token *string `json:"token"`

	// How long, in seconds, the access token is valid.
	Ttl *int `json:"ttl"`

	// The URL of this resource.
	Url *string `json:"url"`
}

// The Type of the Factor
type VerifyV2ServiceAccessTokenFactorType string

// VerifyV2ServiceEntity defines model for verify.v2.service.entity.
type VerifyV2ServiceEntity struct {
	// Account Sid.
	AccountSid *string `json:"account_sid"`

	// The date this Entity was created
	DateCreated *time.Time `json:"date_created"`

	// The date this Entity was updated
	DateUpdated *time.Time `json:"date_updated"`

	// Unique external identifier of the Entity
	Identity *string `json:"identity"`

	// Nested resource URLs.
	Links *map[string]interface{} `json:"links"`

	// Service Sid.
	ServiceSid *string `json:"service_sid"`

	// A string that uniquely identifies this Entity.
	Sid *string `json:"sid"`

	// The URL of this resource.
	Url *string `json:"url"`
}

// VerifyV2ServiceEntityChallenge defines model for verify.v2.service.entity.challenge.
type VerifyV2ServiceEntityChallenge struct {
	// Account Sid.
	AccountSid *string `json:"account_sid"`

	// The date this Challenge was created
	DateCreated *time.Time `json:"date_created"`

	// The date this Challenge was responded
	DateResponded *time.Time `json:"date_responded"`

	// The date this Challenge was updated
	DateUpdated *time.Time `json:"date_updated"`

	// Details about the Challenge.
	Details *map[string]interface{} `json:"details"`

	// Entity Sid.
	EntitySid *string `json:"entity_sid"`

	// The date-time when this Challenge expires
	ExpirationDate *time.Time `json:"expiration_date"`

	// Factor Sid.
	FactorSid *string `json:"factor_sid"`

	// The Factor Type of this Challenge
	FactorType *VerifyV2ServiceEntityChallengeFactorType `json:"factor_type"`

	// Hidden details about the Challenge
	HiddenDetails *map[string]interface{} `json:"hidden_details"`

	// Unique external identifier of the Entity
	Identity *string `json:"identity"`

	// Nested resource URLs.
	Links *map[string]interface{} `json:"links"`

	// Metadata of the challenge.
	Metadata *map[string]interface{} `json:"metadata"`

	// The Reason of this Challenge `status`
	RespondedReason *VerifyV2ServiceEntityChallengeRespondedReason `json:"responded_reason"`

	// Service Sid.
	ServiceSid *string `json:"service_sid"`

	// A string that uniquely identifies this Challenge.
	Sid *string `json:"sid"`

	// The Status of this Challenge
	Status *VerifyV2ServiceEntityChallengeStatus `json:"status"`

	// The URL of this resource.
	Url *string `json:"url"`
}

// The Factor Type of this Challenge
type VerifyV2ServiceEntityChallengeFactorType string

// The Reason of this Challenge `status`
type VerifyV2ServiceEntityChallengeRespondedReason string

// The Status of this Challenge
type VerifyV2ServiceEntityChallengeStatus string

// VerifyV2ServiceEntityChallengeNotification defines model for verify.v2.service.entity.challenge.notification.
type VerifyV2ServiceEntityChallengeNotification struct {
	// Account Sid.
	AccountSid *string `json:"account_sid"`

	// Challenge Sid.
	ChallengeSid *string `json:"challenge_sid"`

	// The date this Notification was created
	DateCreated *time.Time `json:"date_created"`

	// Entity Sid.
	EntitySid *string `json:"entity_sid"`

	// Unique external identifier of the Entity
	Identity *string `json:"identity"`

	// The priority of the notification.
	Priority *string `json:"priority"`

	// Service Sid.
	ServiceSid *string `json:"service_sid"`

	// A string that uniquely identifies this Notification.
	Sid *string `json:"sid"`

	// How long, in seconds, the notification is valid.
	Ttl *int `json:"ttl"`
}

// VerifyV2ServiceEntityFactor defines model for verify.v2.service.entity.factor.
type VerifyV2ServiceEntityFactor struct {
	// Account Sid.
	AccountSid *string `json:"account_sid"`

	// Configurations for a `factor_type`.
	Config *map[string]interface{} `json:"config"`

	// The date this Factor was created
	DateCreated *time.Time `json:"date_created"`

	// The date this Factor was updated
	DateUpdated *time.Time `json:"date_updated"`

	// Entity Sid.
	EntitySid *string `json:"entity_sid"`

	// The Type of this Factor
	FactorType *VerifyV2ServiceEntityFactorFactorType `json:"factor_type"`

	// A human readable description of this resource.
	FriendlyName *string `json:"friendly_name"`

	// Unique external identifier of the Entity
	Identity *string `json:"identity"`

	// Metadata of the factor.
	Metadata *map[string]interface{} `json:"metadata"`

	// Service Sid.
	ServiceSid *string `json:"service_sid"`

	// A string that uniquely identifies this Factor.
	Sid *string `json:"sid"`

	// The Status of this Factor
	Status *VerifyV2ServiceEntityFactorStatus `json:"status"`

	// The URL of this resource.
	Url *string `json:"url"`
}

// The Type of this Factor
type VerifyV2ServiceEntityFactorFactorType string

// The Status of this Factor
type VerifyV2ServiceEntityFactorStatus string

// VerifyV2ServiceEntityNewFactor defines model for verify.v2.service.entity.new_factor.
type VerifyV2ServiceEntityNewFactor struct {
	// Account Sid.
	AccountSid *string `json:"account_sid"`

	// Binding of the factor
	Binding *map[string]interface{} `json:"binding"`

	// Configurations for a `factor_type`.
	Config *map[string]interface{} `json:"config"`

	// The date this Factor was created
	DateCreated *time.Time `json:"date_created"`

	// The date this Factor was updated
	DateUpdated *time.Time `json:"date_updated"`

	// Entity Sid.
	EntitySid *string `json:"entity_sid"`

	// The Type of this Factor
	FactorType *VerifyV2ServiceEntityNewFactorFactorType `json:"factor_type"`

	// A human readable description of this resource.
	FriendlyName *string `json:"friendly_name"`

	// Unique external identifier of the Entity
	Identity *string `json:"identity"`

	// Metadata of the factor.
	Metadata *map[string]interface{} `json:"metadata"`

	// Service Sid.
	ServiceSid *string `json:"service_sid"`

	// A string that uniquely identifies this Factor.
	Sid *string `json:"sid"`

	// The Status of this Factor
	Status *VerifyV2ServiceEntityNewFactorStatus `json:"status"`

	// The URL of this resource.
	Url *string `json:"url"`
}

// The Type of this Factor
type VerifyV2ServiceEntityNewFactorFactorType string

// The Status of this Factor
type VerifyV2ServiceEntityNewFactorStatus string

// VerifyV2ServiceMessagingConfiguration defines model for verify.v2.service.messaging_configuration.
type VerifyV2ServiceMessagingConfiguration struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO-3166-1 country code of the country or `all`.
	Country *string `json:"country"`

	// The RFC 2822 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The RFC 2822 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The SID of the Messaging Service used for this configuration.
	MessagingServiceSid *string `json:"messaging_service_sid"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The URL of this resource.
	Url *string `json:"url"`
}

// VerifyV2ServiceRateLimit defines model for verify.v2.service.rate_limit.
type VerifyV2ServiceRateLimit struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The RFC 2822 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The RFC 2822 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// Description of this Rate Limit
	Description *string `json:"description"`

	// The URLs of related resources
	Links *map[string]interface{} `json:"links"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// A string that uniquely identifies this Rate Limit.
	Sid *string `json:"sid"`

	// A unique, developer assigned name of this Rate Limit.
	UniqueName *string `json:"unique_name"`

	// The URL of this resource.
	Url *string `json:"url"`
}

// VerifyV2ServiceRateLimitBucket defines model for verify.v2.service.rate_limit.bucket.
type VerifyV2ServiceRateLimitBucket struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The RFC 2822 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The RFC 2822 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// Number of seconds that the rate limit will be enforced over.
	Interval *int `json:"interval"`

	// Max number of requests.
	Max *int `json:"max"`

	// Rate Limit Sid.
	RateLimitSid *string `json:"rate_limit_sid"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// A string that uniquely identifies this Bucket.
	Sid *string `json:"sid"`

	// The URL of this resource.
	Url *string `json:"url"`
}

// VerifyV2ServiceVerification defines model for verify.v2.service.verification.
type VerifyV2ServiceVerification struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The amount of the associated PSD2 compliant transaction.
	Amount *string `json:"amount"`

	// The verification method used.
	Channel *VerifyV2ServiceVerificationChannel `json:"channel"`

	// The RFC 2822 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The RFC 2822 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// Information about the phone number being verified
	Lookup *map[string]interface{} `json:"lookup"`

	// The payee of the associated PSD2 compliant transaction
	Payee *string `json:"payee"`

	// An array of verification attempt objects.
	SendCodeAttempts *[]map[string]interface{} `json:"send_code_attempts"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the verification resource
	Status *string `json:"status"`

	// The phone number or email being verified
	To *string `json:"to"`

	// The absolute URL of the Verification resource
	Url *string `json:"url"`

	// Whether the verification was successful
	Valid *bool `json:"valid"`
}

// The verification method used.
type VerifyV2ServiceVerificationChannel string

// VerifyV2ServiceVerificationCheck defines model for verify.v2.service.verification_check.
type VerifyV2ServiceVerificationCheck struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The amount of the associated PSD2 compliant transaction.
	Amount *string `json:"amount"`

	// The verification method to use
	Channel *VerifyV2ServiceVerificationCheckChannel `json:"channel"`

	// The ISO 8601 date and time in GMT when the Verification Check resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the Verification Check resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The payee of the associated PSD2 compliant transaction
	Payee *string `json:"payee"`

	// The SID of the Service that the resource is associated with
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the verification resource
	Status *string `json:"status"`

	// The phone number or email being verified
	To *string `json:"to"`

	// Whether the verification was successful
	Valid *bool `json:"valid"`
}

// The verification method to use
type VerifyV2ServiceVerificationCheckChannel string

// VerifyV2ServiceWebhook defines model for verify.v2.service.webhook.
type VerifyV2ServiceWebhook struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The ISO 8601 date and time in GMT when the resource was created
	DateCreated *time.Time `json:"date_created"`

	// The ISO 8601 date and time in GMT when the resource was last updated
	DateUpdated *time.Time `json:"date_updated"`

	// The array of events that this Webhook is subscribed to.
	EventTypes *[]string `json:"event_types"`

	// The string that you assigned to describe the webhook
	FriendlyName *string `json:"friendly_name"`

	// Service Sid.
	ServiceSid *string `json:"service_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The webhook status
	Status *VerifyV2ServiceWebhookStatus `json:"status"`

	// The absolute URL of the Webhook resource
	Url *string `json:"url"`

	// The webhook version
	Version *VerifyV2ServiceWebhookVersion `json:"version"`

	// The method used when calling the webhook's URL.
	WebhookMethod *VerifyV2ServiceWebhookWebhookMethod `json:"webhook_method"`

	// The URL associated with this Webhook.
	WebhookUrl *string `json:"webhook_url"`
}

// The webhook status
type VerifyV2ServiceWebhookStatus string

// The webhook version
type VerifyV2ServiceWebhookVersion string

// The method used when calling the webhook's URL.
type VerifyV2ServiceWebhookWebhookMethod string

// VerifyV2VerificationAttempt defines model for verify.v2.verification_attempt.
type VerifyV2VerificationAttempt struct {
	// The SID of the Account that created the verification.
	AccountSid *string `json:"account_sid"`

	// Communication channel used for the attempt.
	Channel *VerifyV2VerificationAttemptChannel `json:"channel"`

	// An object containing the channel specific information for an attempt.
	ChannelData *map[string]interface{} `json:"channel_data"`

	// Status of the conversion for the verification.
	ConversionStatus *VerifyV2VerificationAttemptConversionStatus `json:"conversion_status"`

	// The date this Attempt was created
	DateCreated *time.Time `json:"date_created"`

	// The date this Attempt was updated
	DateUpdated *time.Time `json:"date_updated"`

	// An object containing the charge for this verification attempt.
	Price *map[string]interface{} `json:"price"`

	// The SID of the verify service that generated this attempt.
	ServiceSid *string `json:"service_sid"`

	// The SID that uniquely identifies the verification attempt.
	Sid *string `json:"sid"`
	Url *string `json:"url"`

	// The SID of the verification that generated this attempt.
	VerificationSid *string `json:"verification_sid"`
}

// Communication channel used for the attempt.
type VerifyV2VerificationAttemptChannel string

// Status of the conversion for the verification.
type VerifyV2VerificationAttemptConversionStatus string

// VerifyV2VerificationTemplate defines model for verify.v2.verification_template.
type VerifyV2VerificationTemplate struct {
	// Account Sid
	AccountSid *string `json:"account_sid"`

	// A string to describe the verification template
	FriendlyName *string `json:"friendly_name"`

	// A string that uniquely identifies this Template
	Sid *string `json:"sid"`

	// Object with the template translations.
	Translations *map[string]interface{} `json:"translations"`
}

// ListVerificationAttemptParams defines parameters for ListVerificationAttempt.
type ListVerificationAttemptParams struct {
	// Datetime filter used to query Verification Attempts created after this datetime. Given as GMT in RFC 2822 format.
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`

	// Datetime filter used to query Verification Attempts created before this datetime. Given as GMT in RFC 2822 format.
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`

	// Destination of a verification. It is phone number in E.164 format.
	ChannelDataTo *string `json:"ChannelData.To,omitempty"`

	// Filter used to query Verification Attempts sent to the specified destination country.
	Country *string `json:"Country,omitempty"`

	// Filter used to query Verification Attempts by communication channel. Valid values are `SMS` and `CALL`
	Channel *ListVerificationAttemptParamsChannel `json:"Channel,omitempty"`

	// Filter used to query Verification Attempts by verify service. Only attempts of the provided SID will be returned.
	VerifyServiceSid *string `json:"VerifyServiceSid,omitempty"`

	// Filter used to return all the Verification Attempts of a single verification. Only attempts of the provided verification SID will be returned.
	VerificationSid *string `json:"VerificationSid,omitempty"`

	// Filter used to query Verification Attempts by conversion status. Valid values are `UNCONVERTED`, for attempts that were not converted, and `CONVERTED`, for attempts that were confirmed.
	Status *ListVerificationAttemptParamsStatus `json:"Status,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListVerificationAttemptParamsChannel defines parameters for ListVerificationAttempt.
type ListVerificationAttemptParamsChannel string

// ListVerificationAttemptParamsStatus defines parameters for ListVerificationAttempt.
type ListVerificationAttemptParamsStatus string

// FetchFormParamsFormType defines parameters for FetchForm.
type FetchFormParamsFormType string

// ListServiceParams defines parameters for ListService.
type ListServiceParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListEntityParams defines parameters for ListEntity.
type ListEntityParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListChallengeParams defines parameters for ListChallenge.
type ListChallengeParams struct {
	// The unique SID identifier of the Factor.
	FactorSid *string `json:"FactorSid,omitempty"`

	// The Status of the Challenges to fetch. One of `pending`, `expired`, `approved` or `denied`.
	Status *ListChallengeParamsStatus `json:"Status,omitempty"`

	// The desired sort order of the Challenges list. One of `asc` or `desc` for ascending and descending respectively. Defaults to `asc`.
	Order *ListChallengeParamsOrder `json:"Order,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListChallengeParamsStatus defines parameters for ListChallenge.
type ListChallengeParamsStatus string

// ListChallengeParamsOrder defines parameters for ListChallenge.
type ListChallengeParamsOrder string

// ListFactorParams defines parameters for ListFactor.
type ListFactorParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListMessagingConfigurationParams defines parameters for ListMessagingConfiguration.
type ListMessagingConfigurationParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListRateLimitParams defines parameters for ListRateLimit.
type ListRateLimitParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListBucketParams defines parameters for ListBucket.
type ListBucketParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListWebhookParams defines parameters for ListWebhook.
type ListWebhookParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

// ListVerificationTemplateParams defines parameters for ListVerificationTemplate.
type ListVerificationTemplateParams struct {
	// String filter used to query templates with a given friendly name
	FriendlyName *string `json:"FriendlyName,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}
